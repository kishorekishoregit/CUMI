using ClosedXML.Excel;
using Microsoft.CSharp.RuntimeBinder;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using JKWOODS.ErrorManager;
using JKWOODSENTITY;
using JKWOODSBC;
using JKWOODS.Common;



namespace JKWOODS.Controllers
{
 
     public class ReportController : Controller
     {
         #region RM Picklist Print ............................................................................
         public ActionResult RMPicklistPrint()
         {
             return View();
         }


         public ActionResult GetRMPickListprintPageLoad()
         {

             RequestRMPicklistprint requestpicklist = new RequestRMPicklistprint();
             ResponseRMPicklistprint responsepicklist = new ResponseRMPicklistprint();


             RMPicklistPrintBC bc = new RMPicklistPrintBC();
             responsepicklist = bc.RMPicklistprintPageLoadBC();

             string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(responsepicklist.JS_Picklistno);

             var data = resulttable;
             JavaScriptSerializer serializer = new JavaScriptSerializer();
             return Json(data, JsonRequestBehavior.AllowGet);

         }

         //Search
         [HttpPost]
         public ActionResult GetRMPicklistprintdetails()
         {

             RequestRMPicklistprint requestpicklist = new RequestRMPicklistprint();
             ResponseRMPicklistprint responsepicklist = new ResponseRMPicklistprint();

             requestpicklist.requestRMPicklistprint = new RMPicklistprintEntity();
             requestpicklist.requestRMPicklistprint.picklistno = Request.Form["picklistno"];

             RMPicklistPrintBC bc = new RMPicklistPrintBC();
             responsepicklist = bc.FetchRMPicklistprintdetailsBC(requestpicklist);


             string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(responsepicklist.JS_RMPicklist) + "^" + Utility.DataTableToJSONWithJavaScriptSerializer(responsepicklist.JS_RMPicklistdetails);

             var data = resulttable;

             JavaScriptSerializer serializer = new JavaScriptSerializer();
             return Json(data, JsonRequestBehavior.AllowGet);

         }

        #endregion

        #region Stock Report ............................................................................
        public ActionResult StockReport()
        {
            return View();
        }
        public ActionResult GetStockReportPageLoad()
        {
            RequestStockReport request = new RequestStockReport();
            ResponseStockReport response = new ResponseStockReport();
            StockReportBC bc = new StockReportBC();
            response = bc.FetchStockReportPageLoadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_SubCategoryDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        public ActionResult GenerateStockReport()
        {
            RequestStockReport request = new RequestStockReport();
            ResponseStockReport response = new ResponseStockReport();
            StockReportBC bc = new StockReportBC();
            response = bc.GenerateStockReportBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_SubCategoryDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        #endregion

        #region LocationWise StockReport ............................................................................
        public ActionResult LocationWiseStockReport()
        {
            return View();
        }
        public ActionResult GetLocationStockPageLoad()
        {
            RequestLocationStockReport request = new RequestLocationStockReport();
            ResponseLocationStockReport response = new ResponseLocationStockReport();
            LocationStockReportBC bc = new LocationStockReportBC();
            response = bc.FetchLocationStockPageLoadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_ItemDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        public ActionResult GetLocationStockDetails(string ITEMCODE)
        {

            RequestLocationStockReport request = new RequestLocationStockReport();
            ResponseLocationStockReport response = new ResponseLocationStockReport();
            request.requestLocationStockReport = new LocationStockReportEntity();
            request.requestLocationStockReport.ITEMCODE = ITEMCODE;
            LocationStockReportBC bc = new LocationStockReportBC();
            response = bc.LocationStockDetailsBC(request);

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_LocationStockDetails);
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        #endregion
    }
}
