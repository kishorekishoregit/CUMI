using Microsoft.CSharp.RuntimeBinder;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using JKWOODS.ErrorManager;
using JKWOODSENTITY;
using JKWOODSBC;
using JKWOODS.Common;
using System.Globalization;
using ExcelDataReader;
using System.Transactions;
using System.Data.SqlClient;


namespace JKWOODS.Controllers
{

    public class TransactionController : Controller
    {
        private string RMLABEL = ConfigurationManager.AppSettings["RMLABEL"].ToString();
        private string BARCODENO = ConfigurationManager.AppSettings["BARCODE"].ToString();
        private string QRCODEPRN = ConfigurationManager.AppSettings["QRCODE"].ToString();
        private string REMIXLABEL = ConfigurationManager.AppSettings["REMIXLABEL"].ToString();
        private string FGLABEL = ConfigurationManager.AppSettings["FGLABEL"].ToString();
        private string POBARCODELABEL = ConfigurationManager.AppSettings["POBARCODELABEL"].ToString();


        #region GRNEntry ............................................................................
        public ActionResult GRNEntry()
        {
            return View();
        }

        public ActionResult GRNPageLoad()
        {
            listGRNItemdet = new List<GRNDetailEntity>();

            RequestGRNEntry request = new RequestGRNEntry();
            ResponseGRNEntry response = new ResponseGRNEntry();
            GRNEntryBC bc = new GRNEntryBC();
            response = bc.PageloadGRNBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Supplierdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.GRNDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult GRNItemnameFetch(string ITEMCODE)
        {
            RequestGRNEntry request = new RequestGRNEntry();
            ResponseGRNEntry response = new ResponseGRNEntry();
            request.ReqGRNEntry = new GRNEntryEntity();
            request.ReqGRNEntry.ITEMCODE = ITEMCODE;
            GRNEntryBC bc = new GRNEntryBC();
            response = bc.GRNItemnameFetchBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public class GRNItemDetails
        {
            public string ItemCode { get; set; }
            public string ItemName { get; set; }
            public string Quantity { get; set; }
            public string LotNo { get; set; }
            public string NetWeight { get; set; }
            public string GrossWeight { get; set; }
            public string Price { get; set; }
            public string Remove { get; set; }
            public string Edit { get; set; }

        }

        static List<GRNDetailEntity> listGRNItemdet = new List<GRNDetailEntity>();

        public ActionResult AddGRNItemDetails()
        {
            List<GRNItemDetails> listGRNItemInsertdet = new List<GRNItemDetails>();

            if (Request.Form["action"].ToString() == "Update")
            {
                //for (int i = listGRNItemdet.Count - 1; i >= 0; i--)
                for (int i = 0; i < listGRNItemdet.Count; i++)
                {
                    if (listGRNItemdet[i].ITEMCODE == Request.Form["ITEMCODE"] && listGRNItemdet[i].LOTNO == Request.Form["LOTNO"] && listGRNItemdet[i].NETWEIGHT == Request.Form["NETWEIGHT"])
                    {
                        listGRNItemdet.RemoveAt(i);
                    }
                }
                // GRNDeleteRowEdit(Request.Form["ITEMCODE"], Request.Form["LOTNO"], Request.Form["NETWEIGHT"]);
            }

            int duplicatecount = listGRNItemdet.Where(inventorylist => inventorylist.ITEMCODE == Request.Form["ITEMCODE"].ToString() && inventorylist.LOTNO == Request.Form["LOTNO"].ToString() && inventorylist.NETWEIGHT == Request.Form["NETWEIGHT"].ToString()).Count();

            string data = "";
            if (duplicatecount == 0)
            {
                GRNDetailEntity Itemdts = new GRNDetailEntity();

                Itemdts.ITEMCODE = Request.Form["ITEMCODE"];
                Itemdts.ITEMNAME = Request.Form["ITEMNAME"];
                Itemdts.QUANTITY = Request.Form["QTY"];
                Itemdts.LOTNO = Request.Form["LOTNO"];
                Itemdts.NETWEIGHT = Request.Form["NETWEIGHT"];
                Itemdts.GROSSWEIGHT = Request.Form["GROSSWEIGHT"];
                Itemdts.PRICE = Request.Form["PRICE"];
                listGRNItemdet.Add(Itemdts);

                listGRNItemInsertdet = (from inv in listGRNItemdet.AsEnumerable()
                                        select new GRNItemDetails
                                        {

                                            ItemCode = inv.ITEMCODE,
                                            ItemName = inv.ITEMNAME,
                                            Quantity = inv.QUANTITY,
                                            LotNo = inv.LOTNO,
                                            NetWeight = inv.NETWEIGHT,
                                            GrossWeight = inv.GROSSWEIGHT,
                                            Price = inv.PRICE,
                                        }).ToList();
                data = "true" + "|" + JsonConvert.SerializeObject(listGRNItemInsertdet);

            }
            else
            {
                data = "false" + "|" + JsonConvert.SerializeObject("Item Code " + Request.Form["ITEMCODE"].ToString() + " Already Exist.");
            }
            //TempData["InventoryInsert"] = listInventorydet;
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GRNDeleteRow(string Code)
        {

            listGRNItemdet.Remove(listGRNItemdet.FirstOrDefault(r => r.ITEMCODE == Code));

            List<GRNItemDetails> listGRNEntryInsertdet = new List<GRNItemDetails>();

            listGRNEntryInsertdet = (from inv in listGRNItemdet.AsEnumerable()
                                     select new GRNItemDetails
                                     {

                                         ItemCode = inv.ITEMCODE,
                                         ItemName = inv.ITEMNAME,
                                         Quantity = inv.QUANTITY,
                                         LotNo = inv.LOTNO,
                                         NetWeight = inv.NETWEIGHT,
                                         GrossWeight = inv.GROSSWEIGHT,
                                         Price = inv.PRICE,

                                     }).ToList();


            return Json(JsonConvert.SerializeObject(listGRNEntryInsertdet), JsonRequestBehavior.AllowGet);

        }

        public ActionResult GRNDeleteRowEdit(string Code, string lotno, string netwt)
        {

            listGRNItemdet.Remove(listGRNItemdet.FirstOrDefault(r => r.ITEMCODE == Code && r.LOTNO == lotno && r.NETWEIGHT == netwt));

            List<GRNItemDetails> listGRNEntryInsertdet = new List<GRNItemDetails>();

            listGRNEntryInsertdet = (from inv in listGRNItemdet.AsEnumerable()
                                     select new GRNItemDetails
                                     {

                                         ItemCode = inv.ITEMCODE,
                                         ItemName = inv.ITEMNAME,
                                         Quantity = inv.QUANTITY,
                                         LotNo = inv.LOTNO,
                                         NetWeight = inv.NETWEIGHT,
                                         GrossWeight = inv.GROSSWEIGHT,
                                         Price = inv.PRICE,

                                     }).ToList();

            string data = "true" + "|" + JsonConvert.SerializeObject(listGRNEntryInsertdet);
            return Json(data, JsonRequestBehavior.AllowGet);
            // return Json(JsonConvert.SerializeObject(listGRNEntryInsertdet), JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public ActionResult InsertGRNDetails()
        {

            RequestGRNEntry request = new RequestGRNEntry();
            ResponseGRNEntry response = new ResponseGRNEntry();
            request.ReqGRNEntry = new GRNEntryEntity();
            request.requestGRNEntrydetails = listGRNItemdet;
            request.ReqGRNEntry.GRNNO = Request.Form["GRNNO"];
            if (Request.Form["GRNDATE"] != "")
            {
                string date = Request.Form["GRNDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.ReqGRNEntry.GRNDATE = ResultedDate.ToString();

            }
            else
            {
                request.ReqGRNEntry.GRNDATE = "";
            }

            request.ReqGRNEntry.SUPPLIER = Request.Form["SUPPLIER"];
            request.ReqGRNEntry.USERCODE = Session["LoginEmployeeCode"].ToString();
            request.ReqGRNEntry.REFERENCENO = Request.Form["REFERENCENO"];


            GRNEntryBC bc = new GRNEntryBC();
            string value = "Update";

            if (value != Request.Form["actiontype"].ToString())
            {
                response = bc.GRNInsertBC(request);
            }
            else
            {

                response = bc.GRNUpdateBC(request);
            }


            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["GRNINSERT"] = null;
                listGRNItemdet = new List<GRNDetailEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }
        public ActionResult GRNViewDts(string GRNNO)
        {
            RequestGRNEntry request = new RequestGRNEntry();
            ResponseGRNEntry response = new ResponseGRNEntry();
            request.ReqGRNEntry = new GRNEntryEntity();
            request.ReqGRNEntry.GRNNO = GRNNO;
            GRNEntryBC bc = new GRNEntryBC();
            response = bc.GRNViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.GRNDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        public ActionResult GRNEditDts(string GRNNO)
        {
            RequestGRNEntry request = new RequestGRNEntry();
            ResponseGRNEntry response = new ResponseGRNEntry();
            request.ReqGRNEntry = new GRNEntryEntity();
            request.ReqGRNEntry.GRNNO = GRNNO;
            GRNEntryBC bc = new GRNEntryBC();
            response = bc.GRNEditDtsBC(request);

            for (int i = 0; i < response.GRNDetails.Rows.Count; i++)
            {
                GRNDetailEntity GRNEdit = new GRNDetailEntity();

                GRNEdit.ITEMCODE = response.GRNDetails.Rows[i]["ItemCode"].ToString();
                GRNEdit.ITEMNAME = response.GRNDetails.Rows[i]["ItemName"].ToString();
                GRNEdit.QUANTITY = response.GRNDetails.Rows[i]["Quantity"].ToString();
                GRNEdit.LOTNO = response.GRNDetails.Rows[i]["LotNo"].ToString();
                GRNEdit.NETWEIGHT = response.GRNDetails.Rows[i]["NetWeight"].ToString();
                GRNEdit.GROSSWEIGHT = response.GRNDetails.Rows[i]["GrossWeight"].ToString();
                GRNEdit.PRICE = response.GRNDetails.Rows[i]["Price"].ToString();
                listGRNItemdet.Add(GRNEdit);
            }
            TempData["GRNINSERT"] = listGRNItemdet;

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.GRNHeader) + "|" +
                       Utility.DataTableToJSONWithJavaScriptSerializer(response.GRNDetails);

            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult ClearGRNDetails()
        {

            listGRNItemdet = new List<GRNDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region RMQuality ............................................................................
        public ActionResult RMQuality()
        {
            return View();
        }

        public ActionResult GetRMQualityPageLoad()
        {
            RequestRMQuality request = new RequestRMQuality();
            ResponseRMQuality response = new ResponseRMQuality();
            RMQualityBC bc = new RMQualityBC();
            response = bc.FetchRMQualityPageLoadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_RMQualitydetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        public ActionResult InsertRMQuality(string ID, string GRNNO, string ITEMCODE, string ITEMNAME, string LOTNO, string QUANTITY, string REJECTEDQUANTITY, string NETWEIGHT, string GROSSWEIGHT, string REMARKS, string LOTSTATUS)
        {
            string[] IDARR = ID.Split('^');
            string[] GRNNOARR = GRNNO.Split('^');
            string[] ITEMCODEARR = ITEMCODE.Split('^');
            string[] ITEMNAMEARR = ITEMNAME.Split('^');
            string[] LOTNOARR = LOTNO.Split('^');
            string[] QUANTITYARR = QUANTITY.Split('^');
            string[] NETWEIGHTARR = NETWEIGHT.Split('^');
            string[] GROSSWEIGHTARR = GROSSWEIGHT.Split('^');


            RequestRMQuality request = new RequestRMQuality();
            ResponseRMQuality response = new ResponseRMQuality();

            request.requestRMQuality = new RMQualityEntity();

            request.requestrmqualitydetails = new List<RMQualityDetailEntity>();
            for (int i = 0; i < GRNNOARR.Length; i++)
            {
                if (GRNNOARR[i] != "")
                {
                    RMQualityDetailEntity det = new RMQualityDetailEntity();
                    det.ID = IDARR[i];
                    det.GRNNO = GRNNOARR[i];
                    det.ITEMCODE = ITEMCODEARR[i];
                    det.ITEMNAME = ITEMNAMEARR[i];
                    det.LOTNO = LOTNOARR[i];
                    det.QUANTITY = QUANTITYARR[i];
                    det.REJECTEDQUANTITY = REJECTEDQUANTITY;
                    det.NETWEIGHT = NETWEIGHTARR[i];
                    det.GROSSWEIGHT = GROSSWEIGHTARR[i];
                    det.REMARKS = REMARKS;
                    det.LOTSTATUS = LOTSTATUS;

                    request.requestrmqualitydetails.Add(det);



                }
            }

            //request.requestRMQuality.GRNNO = GRNNO;
            // request.requestRMQuality.ITEMCODE = ITEMCODE;
            // request.requestRMQuality.ITEMNAME = ITEMNAME;
            // request.requestRMQuality.LOTNO = LOTNO;
            // request.requestRMQuality.QUANTITY = QUANTITY;
            // request.requestRMQuality.REJECTEDQUANTITY = REJECTEDQUANTITY;
            // request.requestRMQuality.NETWEIGHT = NETWEIGHT;
            // request.requestRMQuality.GROSSWEIGHT = GROSSWEIGHT;
            // request.requestRMQuality.REMARKS = REMARKS;
            // request.requestRMQuality.LOTSTATUS = LOTSTATUS;
            RMQualityBC bc = new RMQualityBC();

            response = bc.InsertRMQualityBC(request);

            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;

            JsonResult json = Json(resultjson, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        #endregion

        //#region RMLabelPrint ............................................................................
        //public ActionResult RMLabelPrint()
        //{
        //    TempData["labeldetails"] = null;
        //    return View();
        //}

        //public ActionResult GetRMLabelPrintPageLoad()
        //{
        //    RMLabelPrintdet = new List<RmLablePrintDetailEntity>();
        //    RMPopupLabelPrintdet = new List<RmLablePrintDetailEntity>();
        //    listInventoryInsertdet = new List<RMPopupLabelPrintRequestDetails>();

        //    RequestRMLabelPrint request = new RequestRMLabelPrint();
        //    ResponseRMLabelPrint response = new ResponseRMLabelPrint();
        //    RMLabelPrintBC bc = new RMLabelPrintBC();
        //    response = bc.FetchRMLabe1PrintPageLoadBC();

        //    string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_GRNDetails)
        //        + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_RMLablePrintDetails);

        //    var data = resulttable;
        //    JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
        //    json.MaxJsonLength = int.MaxValue;
        //    return json;

        //}

        //public ActionResult FetchRMLabelPrintGetLotNoByGRNNo(string GrnNo)
        //{
        //    ResponseRMLabelPrint response = new ResponseRMLabelPrint();
        //    RequestRMLabelPrint request = new RequestRMLabelPrint();
        //    request.ReqtrmlabelprintHeader = new RMLabelPrintEntity();
        //    request.ReqtrmlabelprintHeader.GRNNO = GrnNo;
        //    RMLabelPrintBC bc = new RMLabelPrintBC();
        //    response = bc.FetchRMLabelPrintLotNobyGrnNoBC(request);

        //    var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_LOTDetails) + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_GRNDetails)
        //       + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_HiddenDetails);
        //    return Json(data, JsonRequestBehavior.AllowGet);
        //}

        //public ActionResult FetchRMLabelPrintGetHiddenValuebyLotNO(string GrnNo, String LotNo, string ISImport)
        //{
        //    ResponseRMLabelPrint response = new ResponseRMLabelPrint();
        //    RequestRMLabelPrint request = new RequestRMLabelPrint();
        //    request.ReqtrmlabelprintHeader = new RMLabelPrintEntity();
        //    request.ReqtrmlabelprintHeader.GRNNO = GrnNo;
        //    request.ReqtrmlabelprintHeader.LOTNO = LotNo;
        //    request.ReqtrmlabelprintHeader.ISIMPORT = ISImport;
        //    RMLabelPrintBC bc = new RMLabelPrintBC();
        //    response = bc.FetchRMLabelPrintGetHdnValueByLotNoBC(request);

        //    var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_HiddenDetails);
        //    return Json(data, JsonRequestBehavior.AllowGet);
        //}

        ////btnAdd
        //static List<RmLablePrintDetailEntity> RMLabelPrintdet = new List<RmLablePrintDetailEntity>();
        //static List<RmLablePrintDetailEntity> RMPopupLabelPrintdet = new List<RmLablePrintDetailEntity>();


        //public class RMLabelPrintRequestDetails
        //{
        //    public string GRNNO { get; set; }
        //    public string ITEMCODE { get; set; }
        //    public string ITEMNAME { get; set; }
        //    public string LOTNO { get; set; }
        //    public string SERIALNO { get; set; }
        //    public string QUANTITY { get; set; }
        //    public string NETWEIGHT { get; set; }
        //    public string GROSSWEIGHT { get; set; }
        //    public string GRNDATE { get; set; }

        //}

        //public class RMPopupLabelPrintRequestDetails
        //{
        //    public string GRNNO { get; set; }
        //    public string ITEMCODE { get; set; }
        //    public string ITEMNAME { get; set; }
        //    public string LOTNO { get; set; }
        //    public string SERIALNO { get; set; }
        //    public string QUANTITY { get; set; }
        //    public string NETWEIGHT { get; set; }
        //    public string GROSSWEIGHT { get; set; }
        //    public string GRNDATE { get; set; }
        //    public string ACTUAL { get; set; }
        //    public string REMOVE { get; set; }
        //}


        //public ActionResult AddInventoryDetails()
        //{
        //    List<RMLabelPrintRequestDetails> listInventoryInsertdet = new List<RMLabelPrintRequestDetails>();

        //    int duplicatecount = RMLabelPrintdet.Where(inventorylist => inventorylist.GRNNO == Request.Form["GRNNO"].ToString() && inventorylist.LOTNO == Request.Form["LOTNO"].ToString()).Count();

        //    string result = "";
        //    if (duplicatecount == 0)
        //    {
        //        RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();

        //        RMLblPrintdet.GRNNO = Request.Form["GRNNO"];
        //        RMLblPrintdet.ITEMCODE = Request.Form["ITEMCODE"];
        //        RMLblPrintdet.ITEMNAME = Request.Form["ITEMNAME"];
        //        RMLblPrintdet.LOTNO = Request.Form["LOTNO"];
        //        RMLblPrintdet.SERIALNO = Request.Form["SerialNo"] + "/" + Request.Form["SerialNo"];
        //        RMLblPrintdet.QUANTITY = Request.Form["QUANTITY"];
        //        RMLblPrintdet.NETWEIGHT = Request.Form["NETWEIGHT"];
        //        RMLblPrintdet.GROSSWEIGHT = Request.Form["GROSSWEIGHT"];
        //        RMLblPrintdet.GRNDATE = Request.Form["GRNDATE"];

        //        RMLabelPrintdet.Add(RMLblPrintdet);

        //        listInventoryInsertdet = (from inv in RMLabelPrintdet.AsEnumerable()
        //                                  select new RMLabelPrintRequestDetails
        //                                  {

        //                                      GRNNO = inv.GRNNO,
        //                                      ITEMCODE = inv.ITEMCODE,
        //                                      ITEMNAME = inv.ITEMNAME,
        //                                      LOTNO = inv.LOTNO,
        //                                      SERIALNO = inv.SERIALNO,
        //                                      QUANTITY = inv.QUANTITY,
        //                                      NETWEIGHT = inv.NETWEIGHT,
        //                                      GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                      GRNDATE = inv.GRNDATE
        //                                  }).ToList();
        //        result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

        //    }
        //    else
        //    {
        //        result = "false" + "|" + JsonConvert.SerializeObject("Grn No " + Request.Form["GRNNO"].ToString() + " Already Exist.");
        //    }
        //    return Json(result, JsonRequestBehavior.AllowGet);
        //}

        //public ActionResult AddInventoryMultiDetails()
        //{
        //    List<RMLabelPrintRequestDetails> listInventoryInsertdet = new List<RMLabelPrintRequestDetails>();

        //    int duplicatecount = RMLabelPrintdet.Where(inventorylist => inventorylist.GRNNO == Request.Form["GRNNO"].ToString() && inventorylist.LOTNO == Request.Form["LOTNO"].ToString()).Count();

        //    string result = "";
        //    if (duplicatecount == 0)
        //    {

        //        string[] ITEMCODEARR = Request.Form["ITEMCODE"].ToString().Split('^');
        //        string[] ITEMNAMEARR = Request.Form["ITEMNAME"].ToString().Split('^');
        //        // string[] QUANTITYARR = Request.Form["QUANTITY"].ToString().Split('^');
        //        string[] NETWEIGHTARR = Request.Form["NETWEIGHT"].ToString().Split('^');
        //        string[] GROSSWEIGHTARR = Request.Form["GROSSWEIGHT"].ToString().Split('^');
        //        string[] LOTNOARR = Request.Form["LOTNO"].ToString().Split('^');
        //        string[] GRNDATEARR = Request.Form["GRNDATE"].ToString().Split('^');
        //        for (int i = 0; i < ITEMCODEARR.Length - 1; i++)
        //        {
        //            RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();
        //            RMLblPrintdet.GRNNO = Request.Form["GRNNO"];
        //            RMLblPrintdet.ITEMCODE = ITEMCODEARR[i];
        //            RMLblPrintdet.ITEMNAME = ITEMNAMEARR[i];
        //            RMLblPrintdet.LOTNO = LOTNOARR[i];
        //            RMLblPrintdet.SERIALNO = Request.Form["QUANTITY"] + "/" + Request.Form["QUANTITY"];
        //            RMLblPrintdet.QUANTITY = NETWEIGHTARR[i];
        //            RMLblPrintdet.NETWEIGHT = NETWEIGHTARR[i];
        //            RMLblPrintdet.GROSSWEIGHT = GROSSWEIGHTARR[i];
        //            RMLblPrintdet.GRNDATE = GRNDATEARR[i];
        //            RMLabelPrintdet.Add(RMLblPrintdet);

        //        }
        //        listInventoryInsertdet = (from inv in RMLabelPrintdet.AsEnumerable()
        //                                  select new RMLabelPrintRequestDetails
        //                                  {

        //                                      GRNNO = inv.GRNNO,
        //                                      ITEMCODE = inv.ITEMCODE,
        //                                      ITEMNAME = inv.ITEMNAME,
        //                                      LOTNO = inv.LOTNO,
        //                                      SERIALNO = inv.SERIALNO,
        //                                      QUANTITY = inv.QUANTITY,
        //                                      NETWEIGHT = inv.NETWEIGHT,
        //                                      GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                      GRNDATE = inv.GRNDATE
        //                                  }).ToList();
        //        //RMLblPrintdet.GRNNO = Request.Form["GRNNO"];
        //        //RMLblPrintdet.ITEMCODE = Request.Form["ITEMCODE"];
        //        //RMLblPrintdet.ITEMNAME = Request.Form["ITEMNAME"];
        //        //RMLblPrintdet.LOTNO = Request.Form["LOTNO"];
        //        //RMLblPrintdet.SERIALNO = Request.Form["QUANTITY"] + "/" + Request.Form["QUANTITY"];
        //        //RMLblPrintdet.QUANTITY = Request.Form["QUANTITY"];
        //        //RMLblPrintdet.NETWEIGHT = Request.Form["NETWEIGHT"];
        //        //RMLblPrintdet.GROSSWEIGHT = Request.Form["GROSSWEIGHT"];
        //        //RMLblPrintdet.GRNDATE = Request.Form["GRNDATE"];

        //        //RMLabelPrintdet.Add(RMLblPrintdet);



        //        result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

        //    }
        //    else
        //    {
        //        result = "false" + "|" + JsonConvert.SerializeObject("Grn No " + Request.Form["GRNNO"].ToString() + " Already Exist.");
        //    }
        //    return Json(result, JsonRequestBehavior.AllowGet);
        //}


        //static List<RMPopupLabelPrintRequestDetails> listInventoryInsertdet = new List<RMPopupLabelPrintRequestDetails>();
        ////List<RMPopupLabelPrintRequestDetails> newList = new List<RMPopupLabelPrintRequestDetails>(listInventoryInsertdet);
        //public ActionResult AddPopupInventoryDetails()
        //{

        //    string result = "";
        //    //List<RMPopupLabelPrintRequestDetails> listInventoryInsertdet = new List<RMPopupLabelPrintRequestDetails>();
        //    int duplicatecount = RMPopupLabelPrintdet.Where(inventorylist => inventorylist.GRNNO == Request.Form["GRNNO"].ToString()).Count();
        //    decimal sumactual = (from emp in RMPopupLabelPrintdet
        //                         select emp).Sum(e => Convert.ToDecimal(e.ACTUAL));

        //    decimal netwt = (Convert.ToDecimal(Request.Form["NetWeight"])) / (Convert.ToDecimal(Request.Form["LotQuantity"]));
        //    decimal grosswt = (Convert.ToDecimal(Request.Form["GrossWeight"])) / (Convert.ToDecimal(Request.Form["LotQuantity"]));

        //    if (Request.Form["isauto"].ToString() == "true")
        //    {
        //        long eq = Convert.ToInt64(Request.Form["LotQuantity"]) / Convert.ToInt64(Request.Form["actual"]);
        //        long rem = Convert.ToInt64(Request.Form["LotQuantity"]) % Convert.ToInt64(Request.Form["actual"]);
        //        if (rem > 0)
        //        {
        //            if (rem > 0)
        //            {
        //                RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();

        //                RMLblPrintdet.GRNNO = Request.Form["GrnNo"];
        //                RMLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
        //                RMLblPrintdet.ITEMNAME = Request.Form["ItemName"];
        //                RMLblPrintdet.LOTNO = Request.Form["LotNo"];
        //                RMLblPrintdet.SERIALNO = Convert.ToString(RMPopupLabelPrintdet.Count + 1) + "/" + (eq + 1);
        //                // RMLblPrintdet.QUANTITY = Convert.ToString(eq + 1);
        //                RMLblPrintdet.QUANTITY = Convert.ToString(rem);
        //                RMLblPrintdet.NETWEIGHT = Convert.ToString(rem);
        //                RMLblPrintdet.GROSSWEIGHT = Convert.ToString(grosswt * (Convert.ToDecimal(Request.Form["actual"])));
        //                //RMLblPrintdet.GROSSWEIGHT = Request.Form["GrossWeight"];
        //                RMLblPrintdet.GRNDATE = Request.Form["Grndate"];
        //                RMLblPrintdet.ACTUAL = Convert.ToString(rem);
        //                RMPopupLabelPrintdet.Add(RMLblPrintdet);

        //                Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

        //                listInventoryInsertdet = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                                          select new RMPopupLabelPrintRequestDetails
        //                                          {

        //                                              GRNNO = inv.GRNNO,
        //                                              ITEMCODE = inv.ITEMCODE,
        //                                              ITEMNAME = inv.ITEMNAME,
        //                                              LOTNO = inv.LOTNO,
        //                                              SERIALNO = inv.SERIALNO,
        //                                              QUANTITY = inv.QUANTITY,
        //                                              NETWEIGHT = inv.NETWEIGHT,
        //                                              GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                              GRNDATE = inv.GRNDATE,
        //                                              ACTUAL = inv.ACTUAL
        //                                          }).ToList();

        //            }

        //            for (int i = 0; i < eq; i++)
        //            {
        //                RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();

        //                RMLblPrintdet.GRNNO = Request.Form["GrnNo"];
        //                RMLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
        //                RMLblPrintdet.ITEMNAME = Request.Form["ItemName"];
        //                RMLblPrintdet.LOTNO = Request.Form["LotNo"];
        //                RMLblPrintdet.SERIALNO = Convert.ToString(RMPopupLabelPrintdet.Count + 1) + "/" + (eq + 1);
        //                //  RMLblPrintdet.QUANTITY = Convert.ToString(eq + 1);
        //                RMLblPrintdet.QUANTITY = Request.Form["actual"];
        //                RMLblPrintdet.NETWEIGHT = Convert.ToString(netwt * (Convert.ToDecimal(Request.Form["actual"])));
        //                RMLblPrintdet.GROSSWEIGHT = Convert.ToString(grosswt * (Convert.ToDecimal(Request.Form["actual"])));
        //                //RMLblPrintdet.GROSSWEIGHT = Request.Form["GrossWeight"];
        //                RMLblPrintdet.GRNDATE = Request.Form["Grndate"];
        //                RMLblPrintdet.ACTUAL = Request.Form["actual"];
        //                RMPopupLabelPrintdet.Add(RMLblPrintdet);

        //                Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

        //                listInventoryInsertdet = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                                          select new RMPopupLabelPrintRequestDetails
        //                                          {

        //                                              GRNNO = inv.GRNNO,
        //                                              ITEMCODE = inv.ITEMCODE,
        //                                              ITEMNAME = inv.ITEMNAME,
        //                                              LOTNO = inv.LOTNO,
        //                                              SERIALNO = inv.SERIALNO,
        //                                              QUANTITY = inv.QUANTITY,
        //                                              NETWEIGHT = inv.NETWEIGHT,
        //                                              GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                              GRNDATE = inv.GRNDATE,
        //                                              ACTUAL = inv.ACTUAL
        //                                          }).ToList();


        //            }

        //            result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

        //        }
        //        else
        //        {


        //            for (int i = 0; i < eq; i++)
        //            {
        //                RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();

        //                RMLblPrintdet.GRNNO = Request.Form["GrnNo"];
        //                RMLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
        //                RMLblPrintdet.ITEMNAME = Request.Form["ItemName"];
        //                RMLblPrintdet.LOTNO = Request.Form["LotNo"];
        //                RMLblPrintdet.SERIALNO = Convert.ToString(RMPopupLabelPrintdet.Count + 1) + "/" + (eq);
        //                // RMLblPrintdet.QUANTITY = Convert.ToString(eq );
        //                RMLblPrintdet.QUANTITY = Request.Form["actual"];
        //                RMLblPrintdet.NETWEIGHT = Convert.ToString(netwt * (Convert.ToDecimal(Request.Form["actual"])));
        //                RMLblPrintdet.GROSSWEIGHT = Convert.ToString(grosswt * (Convert.ToDecimal(Request.Form["actual"])));
        //                //RMLblPrintdet.GROSSWEIGHT = Request.Form["GrossWeight"];
        //                RMLblPrintdet.GRNDATE = Request.Form["Grndate"];
        //                RMLblPrintdet.ACTUAL = Request.Form["actual"];
        //                RMPopupLabelPrintdet.Add(RMLblPrintdet);

        //                Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

        //                listInventoryInsertdet = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                                          select new RMPopupLabelPrintRequestDetails
        //                                          {

        //                                              GRNNO = inv.GRNNO,
        //                                              ITEMCODE = inv.ITEMCODE,
        //                                              ITEMNAME = inv.ITEMNAME,
        //                                              LOTNO = inv.LOTNO,
        //                                              SERIALNO = inv.SERIALNO,
        //                                              QUANTITY = inv.QUANTITY,
        //                                              NETWEIGHT = inv.NETWEIGHT,
        //                                              GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                              GRNDATE = inv.GRNDATE,
        //                                              ACTUAL = inv.ACTUAL
        //                                          }).ToList();


        //            }

        //            result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

        //        }
        //        // result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet) + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);
        //    }
        //    else
        //    {


        //        if ((Convert.ToDecimal(Request.Form["LotQuantity"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"]))) >= 0)
        //        {
        //            //if (duplicatecount == 0)
        //            //{
        //            RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();

        //            RMLblPrintdet.GRNNO = Request.Form["GrnNo"];
        //            RMLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
        //            RMLblPrintdet.ITEMNAME = Request.Form["ItemName"];
        //            RMLblPrintdet.LOTNO = Request.Form["LotNo"];
        //            RMLblPrintdet.SERIALNO = Convert.ToString(RMPopupLabelPrintdet.Count + 1) + "/" + Request.Form["Quantity"];
        //            // RMLblPrintdet.QUANTITY = Request.Form["Quantity"];
        //            RMLblPrintdet.QUANTITY = Request.Form["actual"]; ;
        //            RMLblPrintdet.NETWEIGHT = Convert.ToString(netwt * (Convert.ToDecimal(Request.Form["actual"])));
        //            RMLblPrintdet.GROSSWEIGHT = Convert.ToString(grosswt * (Convert.ToDecimal(Request.Form["actual"])));
        //            //RMLblPrintdet.GROSSWEIGHT = Request.Form["GrossWeight"];
        //            RMLblPrintdet.GRNDATE = Request.Form["Grndate"];
        //            RMLblPrintdet.ACTUAL = Request.Form["actual"];
        //            if (listInventoryInsertdet.Count < Convert.ToInt32(Request.Form["Quantity"]))
        //            {
        //                RMPopupLabelPrintdet.Add(RMLblPrintdet);



        //                Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

        //                listInventoryInsertdet = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                                          select new RMPopupLabelPrintRequestDetails
        //                                          {

        //                                              GRNNO = inv.GRNNO,
        //                                              ITEMCODE = inv.ITEMCODE,
        //                                              ITEMNAME = inv.ITEMNAME,
        //                                              LOTNO = inv.LOTNO,
        //                                              SERIALNO = inv.SERIALNO,
        //                                              QUANTITY = inv.QUANTITY,
        //                                              NETWEIGHT = inv.NETWEIGHT,
        //                                              GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                              GRNDATE = inv.GRNDATE,
        //                                              ACTUAL = inv.ACTUAL
        //                                          }).ToList();
        //                if ((listInventoryInsertdet.Count <= Convert.ToInt32(Request.Form["Quantity"])) && ((Convert.ToDecimal(Request.Form["LotQuantity"]) - (sumactual)) >= 0))
        //                {
        //                    result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);
        //                }
        //            }
        //            else
        //            {
        //                //RMPopupLabelPrintdet.Clear();
        //                //listInventoryInsertdet = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                //                          select new RMPopupLabelPrintRequestDetails
        //                //                          {

        //                //                              GRNNO = inv.GRNNO,
        //                //                              ITEMCODE = inv.ITEMCODE,
        //                //                              ITEMNAME = inv.ITEMNAME,
        //                //                              LOTNO = inv.LOTNO,
        //                //                              SERIALNO = inv.SERIALNO,
        //                //                              QUANTITY = inv.QUANTITY,
        //                //                              NETWEIGHT = inv.NETWEIGHT,
        //                //                              GROSSWEIGHT = inv.GROSSWEIGHT,
        //                //                              GRNDATE = inv.GRNDATE,
        //                //                              ACTUAL = inv.ACTUAL
        //                //                          }).ToList();
        //                result = "false" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);
        //            }



        //        }
        //        else
        //        {
        //            RMPopupLabelPrintdet.Clear();
        //            listInventoryInsertdet = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                                      select new RMPopupLabelPrintRequestDetails
        //                                      {

        //                                          GRNNO = inv.GRNNO,
        //                                          ITEMCODE = inv.ITEMCODE,
        //                                          ITEMNAME = inv.ITEMNAME,
        //                                          LOTNO = inv.LOTNO,
        //                                          SERIALNO = inv.SERIALNO,
        //                                          QUANTITY = inv.QUANTITY,
        //                                          NETWEIGHT = inv.NETWEIGHT,
        //                                          GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                          GRNDATE = inv.GRNDATE,
        //                                          ACTUAL = inv.ACTUAL
        //                                      }).ToList();
        //            result = "false" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

        //            //  result = "false" + "|" + JsonConvert.SerializeObject("Total Actual Weight should not Exceed " + Request.Form["LotQuantity"].ToString());
        //        }

        //    }

        //    return Json(result, JsonRequestBehavior.AllowGet);
        //}
        //public ActionResult ClearRMPopLabelprint()
        //{
        //    RMPopupLabelPrintdet = new List<RmLablePrintDetailEntity>();
        //    RMPopupLabelPrintdet.Clear();

        //    listInventoryInsertdet = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                              select new RMPopupLabelPrintRequestDetails
        //                              {

        //                                  GRNNO = inv.GRNNO,
        //                                  ITEMCODE = inv.ITEMCODE,
        //                                  ITEMNAME = inv.ITEMNAME,
        //                                  LOTNO = inv.LOTNO,
        //                                  SERIALNO = inv.SERIALNO,
        //                                  QUANTITY = inv.QUANTITY,
        //                                  NETWEIGHT = inv.NETWEIGHT,
        //                                  GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                  GRNDATE = inv.GRNDATE,
        //                                  ACTUAL = inv.ACTUAL
        //                              }).ToList();


        //    return Json(JsonConvert.SerializeObject(listInventoryInsertdet), JsonRequestBehavior.AllowGet);
        //}
        //public ActionResult ClearRMLabelprint()
        //{

        //    RMLabelPrintdet = new List<RmLablePrintDetailEntity>();
        //    return Json("", JsonRequestBehavior.AllowGet);
        //}
        //static List<RMPopupLabelPrintRequestDetails> listInventoryInsertdet1 = new List<RMPopupLabelPrintRequestDetails>();


        //public ActionResult OkInventoryDetails()
        //{

        //    List<RMLabelPrintRequestDetails> listInventoryInsertdet = new List<RMLabelPrintRequestDetails>();
        //    string result = "";
        //    decimal sumactual = (from emp in RMPopupLabelPrintdet
        //                         select emp).Sum(e => Convert.ToDecimal(e.ACTUAL));
        //    decimal sumlot = Convert.ToDecimal(Request.Form["LotQuantity"]);
        //    int rmcount = RMPopupLabelPrintdet.Count;
        //    if (Request.Form["isauto"].ToString() == "true")
        //    {
        //        if (RMPopupLabelPrintdet.Count > 0)
        //        {
        //            foreach (RmLablePrintDetailEntity rml in RMPopupLabelPrintdet)
        //            {
        //                RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();
        //                RMLblPrintdet.GRNNO = rml.GRNNO;
        //                RMLblPrintdet.ITEMCODE = rml.ITEMCODE;
        //                RMLblPrintdet.ITEMNAME = rml.ITEMNAME;
        //                RMLblPrintdet.LOTNO = rml.LOTNO;
        //                RMLblPrintdet.SERIALNO = rml.SERIALNO;
        //                RMLblPrintdet.QUANTITY = rml.QUANTITY;
        //                RMLblPrintdet.NETWEIGHT = rml.NETWEIGHT;
        //                RMLblPrintdet.GROSSWEIGHT = rml.GROSSWEIGHT;
        //                RMLblPrintdet.GRNDATE = rml.GRNDATE;

        //                RMLblPrintdet.ACTUAL = rml.ACTUAL;
        //                RMLabelPrintdet.Add(RMLblPrintdet);
        //            }
        //        }



        //        RMPopupLabelPrintdet.Clear();
        //        listInventoryInsertdet1 = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                                   select new RMPopupLabelPrintRequestDetails
        //                                   {

        //                                       GRNNO = inv.GRNNO,
        //                                       ITEMCODE = inv.ITEMCODE,
        //                                       ITEMNAME = inv.ITEMNAME,
        //                                       LOTNO = inv.LOTNO,
        //                                       SERIALNO = inv.SERIALNO,
        //                                       QUANTITY = inv.QUANTITY,
        //                                       NETWEIGHT = inv.NETWEIGHT,
        //                                       GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                       GRNDATE = inv.GRNDATE,
        //                                       ACTUAL = inv.ACTUAL
        //                                   }).ToList();

        //        listInventoryInsertdet = (from inv in RMLabelPrintdet.AsEnumerable()
        //                                  select new RMLabelPrintRequestDetails
        //                                  {

        //                                      GRNNO = inv.GRNNO,
        //                                      ITEMCODE = inv.ITEMCODE,
        //                                      ITEMNAME = inv.ITEMNAME,
        //                                      LOTNO = inv.LOTNO,
        //                                      SERIALNO = inv.SERIALNO,
        //                                      QUANTITY = inv.QUANTITY,
        //                                      NETWEIGHT = inv.NETWEIGHT,
        //                                      GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                      GRNDATE = inv.GRNDATE
        //                                  }).ToList();

        //        result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet) + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);

        //    }
        //    else
        //    {
        //        if (sumlot == sumactual && (rmcount == Convert.ToInt32(Request.Form["Quantity"])))
        //        {

        //            if (RMPopupLabelPrintdet.Count > 0)
        //            {
        //                foreach (RmLablePrintDetailEntity rml in RMPopupLabelPrintdet)
        //                {
        //                    RmLablePrintDetailEntity RMLblPrintdet = new RmLablePrintDetailEntity();
        //                    RMLblPrintdet.GRNNO = rml.GRNNO;
        //                    RMLblPrintdet.ITEMCODE = rml.ITEMCODE;
        //                    RMLblPrintdet.ITEMNAME = rml.ITEMNAME;
        //                    RMLblPrintdet.LOTNO = rml.LOTNO;
        //                    RMLblPrintdet.SERIALNO = rml.SERIALNO;
        //                    RMLblPrintdet.QUANTITY = rml.QUANTITY;
        //                    RMLblPrintdet.NETWEIGHT = rml.NETWEIGHT;
        //                    RMLblPrintdet.GROSSWEIGHT = rml.GROSSWEIGHT;
        //                    RMLblPrintdet.GRNDATE = rml.GRNDATE;

        //                    RMLblPrintdet.ACTUAL = rml.ACTUAL;
        //                    RMLabelPrintdet.Add(RMLblPrintdet);
        //                }
        //            }



        //            RMPopupLabelPrintdet.Clear();
        //            listInventoryInsertdet1 = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                                       select new RMPopupLabelPrintRequestDetails
        //                                       {

        //                                           GRNNO = inv.GRNNO,
        //                                           ITEMCODE = inv.ITEMCODE,
        //                                           ITEMNAME = inv.ITEMNAME,
        //                                           LOTNO = inv.LOTNO,
        //                                           SERIALNO = inv.SERIALNO,
        //                                           QUANTITY = inv.QUANTITY,
        //                                           NETWEIGHT = inv.NETWEIGHT,
        //                                           GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                           GRNDATE = inv.GRNDATE,
        //                                           ACTUAL = inv.ACTUAL
        //                                       }).ToList();

        //            listInventoryInsertdet = (from inv in RMLabelPrintdet.AsEnumerable()
        //                                      select new RMLabelPrintRequestDetails
        //                                      {

        //                                          GRNNO = inv.GRNNO,
        //                                          ITEMCODE = inv.ITEMCODE,
        //                                          ITEMNAME = inv.ITEMNAME,
        //                                          LOTNO = inv.LOTNO,
        //                                          SERIALNO = inv.SERIALNO,
        //                                          QUANTITY = inv.QUANTITY,
        //                                          NETWEIGHT = inv.NETWEIGHT,
        //                                          GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                          GRNDATE = inv.GRNDATE
        //                                      }).ToList();
        //            //  result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet) + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);

        //            //if ((rmcount == Convert.ToInt32(Request.Form["Quantity"])) )
        //            //{
        //            result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet) + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);
        //            //}
        //            //else
        //            //{
        //            //   // RMLabelPrintdet.Clear();
        //            //    result = "false" + "|" + JsonConvert.SerializeObject("Divide " + Request.Form["LotQuantity"].ToString()) + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);
        //            //}


        //        }
        //        else
        //        {
        //            result = "false" + "|" + JsonConvert.SerializeObject("Please Split Lot Quantity to Proceed") + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);
        //        }
        //    }
        //    return Json(result, JsonRequestBehavior.AllowGet);
        //}
        ////Delete List Row
        //public ActionResult DeleteInspectionRow(string SERIALNO, string ACTUAL)
        //{
        //    List<RMPopupLabelPrintRequestDetails> listInventoryInsertdet4 = new List<RMPopupLabelPrintRequestDetails>();
        //    RMPopupLabelPrintdet.Remove(RMPopupLabelPrintdet.Single(r => r.SERIALNO == SERIALNO && r.ACTUAL == ACTUAL));
        //    // listInventoryInsertdet4.Where(w => w.SERIALNO == SERIALNO && w.ACTUAL == ACTUAL).ToList();

        //    listInventoryInsertdet4 = (from inv in RMPopupLabelPrintdet.AsEnumerable()
        //                               select new RMPopupLabelPrintRequestDetails
        //                               {
        //                                   GRNNO = inv.GRNNO,
        //                                   ITEMCODE = inv.ITEMCODE,
        //                                   ITEMNAME = inv.ITEMNAME,
        //                                   LOTNO = inv.LOTNO,
        //                                   SERIALNO = inv.SERIALNO,
        //                                   QUANTITY = inv.QUANTITY,
        //                                   NETWEIGHT = inv.NETWEIGHT,
        //                                   GROSSWEIGHT = inv.GROSSWEIGHT,
        //                                   GRNDATE = inv.GRNDATE,
        //                                   ACTUAL = inv.ACTUAL
        //                               }).ToList();
        //    return Json(JsonConvert.SerializeObject(listInventoryInsertdet4), JsonRequestBehavior.AllowGet);
        //}

        //[HttpPost]
        //public ActionResult RMReprint(string grnno, string lotno, string serialno)
        //{


        //    ResponseRMLabelPrint response = new ResponseRMLabelPrint();
        //    RequestRMLabelPrint request = new RequestRMLabelPrint();
        //    request.ReqtrmlabelprintHeader = new RMLabelPrintEntity();
        //    request.ReqtrmlabelprintHeader.GRNNO = grnno;
        //    request.ReqtrmlabelprintHeader.LOTNO = lotno;
        //    request.ReqtrmlabelprintHeader.SERIALNO = serialno;
        //    RMLabelPrintBC bc = new RMLabelPrintBC();
        //    response = bc.RMReprintBC(request);


        //    request.requestrmlabelprintdetails = new List<RmLablePrintDetailEntity>();


        //    string strbarcode = "";
        //    StringBuilder stringBuilder = new StringBuilder();
        //    for (int i = 0; i < response.JS_LOTDetails.Rows.Count; i++)
        //    {

        //        strbarcode += response.JS_LOTDetails.Rows[i]["BARCODE"].ToString() + "^";
        //        StreamReader streamReader = new StreamReader(RMLABEL);
        //        string str_ = streamReader.ReadToEnd();
        //        string str_2 = str_;
        //        str_2 = str_2.Replace("$ITEMCODE$", response.JS_LOTDetails.Rows[i]["ITEMCODE"].ToString());
        //        str_2 = str_2.Replace("$qrcode$", "qrcode" + i);
        //        str_2 = str_2.Replace("$ITEMNAME$", response.JS_LOTDetails.Rows[i]["ITEMNAME"].ToString());
        //        str_2 = str_2.Replace("$GRNNO$", response.JS_LOTDetails.Rows[i]["GRNNO"].ToString());
        //        str_2 = str_2.Replace("$LOTNO$", response.JS_LOTDetails.Rows[i]["LOTNO"].ToString());
        //        str_2 = str_2.Replace("$LOTQUANTITY$", response.JS_LOTDetails.Rows[i]["QUANTITY"].ToString());
        //        str_2 = str_2.Replace("$GRNDATE$", response.JS_LOTDetails.Rows[i]["GRNDATE"].ToString());
        //        str_2 = str_2.Replace("$LABELSEQ$", response.JS_LOTDetails.Rows[i]["LOTSERIALNO"].ToString());
        //        stringBuilder.Append(str_2);

        //    }

        //    if (strbarcode.Length > 0)
        //        strbarcode = strbarcode.Substring(0, strbarcode.Length - 1);

        //    var data = stringBuilder.ToString();
        //    if (response.result == true)
        //    {
        //        string strdata = response.result + "|" + data + "|" + strbarcode;
        //        TempData["labeldetails"] = null;
        //        RMLabelPrintdet = new List<RmLablePrintDetailEntity>();
        //        return Json(strdata);
        //    }
        //    else
        //    {
        //        string strdata = Convert.ToString(response.result);
        //        return Json(strdata);
        //    }
        //}



        //[HttpPost]
        //public ActionResult InsertRMLabelPrintDetails(string grnno, string itemcode, string itemname, string lotno, string serialno, string quantity, string netweight, string grossweight, string grndate)
        //{
        //    List<RMLabelPrintRequestDetails> ListMaterialDtls = new List<RMLabelPrintRequestDetails>();
        //    RequestRMLabelPrint request = new RequestRMLabelPrint();
        //    ResponseRMLabelPrint response = new ResponseRMLabelPrint();

        //    request.requestrmlabelprintdetails = new List<RmLablePrintDetailEntity>();

        //    string[] grnnoarr = grnno.Split('^');
        //    string[] itemcodearr = itemcode.Split('^');
        //    string[] itemnamearr = itemname.Split('^');
        //    string[] lotnoarr = lotno.Split('^');
        //    string[] serialnoarr = serialno.Split('^');
        //    string[] quantityarr = quantity.Split('^');
        //    string[] netweightarr = netweight.Split('^');
        //    string[] grossweightarr = grossweight.Split('^');
        //    string[] grndatearr = grndate.Split('^');

        //    string strbarcode = "";
        //    StringBuilder stringBuilder = new StringBuilder();
        //    for (int i = 0; i < grnnoarr.Length; i++)
        //    {
        //        if (grnnoarr[i] != "")
        //        {
        //            RmLablePrintDetailEntity det = new RmLablePrintDetailEntity();
        //            det.GRNNO = grnnoarr[i];
        //            det.ITEMCODE = itemcodearr[i];
        //            det.ITEMNAME = itemnamearr[i];
        //            det.LOTNO = lotnoarr[i];
        //            det.SERIALNO = serialnoarr[i];
        //            det.QUANTITY = quantityarr[i];
        //            det.NETWEIGHT = netweightarr[i];
        //            det.GROSSWEIGHT = grossweightarr[i];
        //            string barcode = DateTime.Now.Ticks.ToString() + i;
        //            det.BARCODE = barcode + serialnoarr[i];
        //            request.requestrmlabelprintdetails.Add(det);
        //            strbarcode += barcode + serialnoarr[i] + "^";

        //            String test = @"<div style='page-break-after:always'><table style='width: 375px; margin-top:10px; margin-left:25px;'><tr><td text-align='left' style='width: 375px'><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial'>Item: $ITEMCODE$</p><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial; font-stretch: condensed'>Name: $ITEMNAME$</p><p style='margin-top:10px; margin-bottom:0px; font-size:20px; font-weight:700; font-family: Arial'>GRN No.: $GRNNO$</p><p style='margin-top:0px; margin-bottom:0px; font-weight:700; font-family: Arial; font-stretch: condensed'><span style='font-size:25px;'>LOT NO.: </span><span style='font-size:40px;'>$LOTNO$</span></p></td> </tr></table><table style='width: 375px; margin-left:25px;'><tr><td text-align='left' style='width: 200px''><p style='margin-top:0px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial'>Date: $GRNDATE$</p><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial'>Label Seq.: $LABELSEQ$</p></td><td align='center' style='width: 175px; vertical-align:middle;'><div style='margin: 10px;' id='$qrcode$'></div></td></tr></table></div>";

        //            byte[] byteArray = Encoding.ASCII.GetBytes(test);
        //            MemoryStream stream = new MemoryStream(byteArray);
        //            //StreamReader streamReader = new StreamReader(stream);
        //            StreamReader streamReader = new StreamReader(RMLABEL);
        //            string str_ = streamReader.ReadToEnd();
        //            string str_2 = str_;
        //            str_2 = str_2.Replace("$ITEMCODE$", itemcodearr[i]);
        //            str_2 = str_2.Replace("$qrcode$", "qrcode" + i);
        //            str_2 = str_2.Replace("$ITEMNAME$", itemnamearr[i]);
        //            str_2 = str_2.Replace("$GRNNO$", grnnoarr[i]);
        //            str_2 = str_2.Replace("$LOTNO$", lotnoarr[i]);
        //            str_2 = str_2.Replace("$LOTQUANTITY$", quantityarr[i]);
        //            str_2 = str_2.Replace("$GRNDATE$", grndatearr[i]);
        //            str_2 = str_2.Replace("$LABELSEQ$", serialnoarr[i]);
        //            stringBuilder.Append(str_2);
        //        }
        //    }

        //    if (strbarcode.Length > 0)
        //        strbarcode = strbarcode.Substring(0, strbarcode.Length - 1);
        //    RMLabelPrintBC bc = new RMLabelPrintBC();
        //    response = bc.InsertTempTableRMLabelPrintBC(request);
        //    var data = stringBuilder.ToString();
        //    if (response.result == true)
        //    {
        //        string strdata = response.result + "|" + data + "|" + strbarcode;
        //        TempData["labeldetails"] = null;
        //        RMLabelPrintdet = new List<RmLablePrintDetailEntity>();
        //        return Json(strdata);
        //    }
        //    else
        //    {
        //        string strdata = Convert.ToString(response.result);
        //        return Json(strdata);
        //    }
        //}

        //#endregion

        #region GRNUpload ............................................................................
        public ActionResult GRNUpload()
        {
            TempData["GRNUPLOAD"] = null;
            return View();
        }

        public ActionResult GRNUploadPageLoad()
        {

            RequestGRNUpload request = new RequestGRNUpload();
            ResponseGRNUpload response = new ResponseGRNUpload();
            GRNUploadBC bc = new GRNUploadBC();
            response = bc.PageloadGRNUploadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Supplierdetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }


        public class ExcelUpload
        {
            public string GRNNO { get; set; }
            public string ITEMCODE { get; set; }
            public string ITEMNAME { get; set; }
            public string LOTNO { get; set; }
            public string QUANTITY { get; set; }
            public string NETWEIGHT { get; set; }
            public string GROSSWEIGHT { get; set; }

        }

        static List<GRNUploadDetailEntity> listGRNUploadItemdet = new List<GRNUploadDetailEntity>();

        [HttpPost]
        public ActionResult EarningUploads()
        {
            string results = "";

            if (Request.Files.Count > 0)
            {
                try
                {

                    // string Effective = 
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    var postedFile = System.Web.HttpContext.Current.Request.Files["CsvDoc"];

                    string path = Path.GetFileName(postedFile.FileName);

                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if (file.FileName == postedFile.FileName)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                Stream stream = file.InputStream;
                                IExcelDataReader reader = null;
                                if (file.FileName.EndsWith(".xls"))
                                {
                                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                                }
                                else if (file.FileName.EndsWith(".xlsx"))
                                {
                                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                                }
                                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                                {
                                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                                    {
                                        UseHeaderRow = true
                                    }
                                });
                                DataTable dataTable = result.Tables[0];

                                DataTable dts = new DataTable();
                                dts.Columns.Add("SNO");
                                dts.Columns.Add("ITEMCODE");
                                dts.Columns.Add("ITEMNAME");
                                dts.Columns.Add("LOTNO");
                                dts.Columns.Add("QUANTITY");
                                dts.Columns.Add("NETWEIGHT");
                                dts.Columns.Add("GROSSWEIGHT");

                                string colnames = string.Empty;
                                string ColumnData = string.Empty;

                                for (var j = 25; j < dataTable.Rows.Count; j++)
                                {
                                    DataRow dr = dts.NewRow();
                                    // var theUrl = dataTable.Rows[j][2].ToString();
                                    dr["SNO"] = dataTable.Rows[j][2].ToString();
                                    dr["ITEMCODE"] = dataTable.Rows[j][3].ToString();
                                    dr["ITEMNAME"] = dataTable.Rows[j][4].ToString();
                                    dr["LOTNO"] = dataTable.Rows[j][10].ToString();
                                    dr["QUANTITY"] = dataTable.Rows[j][6].ToString();
                                    dr["NETWEIGHT"] = dataTable.Rows[j][8].ToString();
                                    dr["GROSSWEIGHT"] = dataTable.Rows[j][9].ToString();


                                    if (!dataTable.Rows[j][2].ToString().Equals(""))
                                    {
                                        GRNUploadDetailEntity Itemdts = new GRNUploadDetailEntity();

                                        Itemdts.ITEMCODE = dataTable.Rows[j][3].ToString();
                                        Itemdts.ITEMNAME = dataTable.Rows[j][4].ToString();
                                        Itemdts.QUANTITY = dataTable.Rows[j][6].ToString();
                                        Itemdts.LOTNO = dataTable.Rows[j][10].ToString();
                                        Itemdts.NETWEIGHT = dataTable.Rows[j][8].ToString();
                                        Itemdts.GROSSWEIGHT = dataTable.Rows[j][9].ToString();
                                        Itemdts.PRICE = "0";
                                        listGRNUploadItemdet.Add(Itemdts);
                                        dts.Rows.Add(dr);
                                    }
                                    else
                                    {

                                    }

                                }

                                //foreach (DataRow row in dataTable.Rows)
                                //{
                                //                  DataRow dr = dts.NewRow();

                                //                        dr["GRNNO"] = row[2].ToString();
                                //                        dr["ITEMCODE"] = row[3].ToString();
                                //                        dr["ITEMNAME"] = row[4].ToString();
                                //                        dr["LOTNO"] = row[10].ToString();
                                //                        dr["QUANTITY"] = row[6].ToString();
                                //                        dr["NETWEIGHT"] = row[8].ToString();
                                //                        dr["GROSSWEIGHT"] = row[9].ToString();

                                //                        dts.Rows.Add(dr);

                                //}

                                reader.Close();

                                results = "True" + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(dts);


                            }
                        }
                        else
                        {
                            results = "False" + "|" + "Uploaded InValid Excel File. ";
                        }

                    }


                }

                catch (Exception ex)
                {

                    results = "False" + "|" + "Error occurred. Error details: ";

                }
            }

            JsonResult json = Json(results, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }


        [HttpPost]
        public ActionResult InsertGRNUploadDetails()
        {

            RequestGRNUpload request = new RequestGRNUpload();
            ResponseGRNUpload response = new ResponseGRNUpload();
            request.ReqGRNUpload = new GRNUploadEntity();
            request.requestGRNUploaddetails = listGRNUploadItemdet;
            request.ReqGRNUpload.GRNNO = Request.Form["GRNNO"];
            if (Request.Form["GRNDATE"] != "")
            {
                string date = Request.Form["GRNDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.ReqGRNUpload.GRNDATE = ResultedDate.ToString();

            }
            else
            {
                request.ReqGRNUpload.GRNDATE = "";
            }

            request.ReqGRNUpload.SUPPLIER = Request.Form["SUPPLIER"];
            request.ReqGRNUpload.USERCODE = Session["LoginEmployeeCode"].ToString();
            request.ReqGRNUpload.REFERENCENO = Request.Form["REFERENCENO"];


            GRNUploadBC bc = new GRNUploadBC();

            response = bc.GRNUploadInsertBC(request);



            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["GRNUPLOAD"] = null;
                listGRNUploadItemdet = new List<GRNUploadDetailEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }





        #endregion

        #region PRN ............................................................................
        public ActionResult PRNEntry()
        {
            TempData["prnentrydetails"] = null;
            return View();
        }
        public ActionResult GetPRNEntryPageLoad()
        {
            PRNEntrydet = new List<PRNEntryDetailEntity>();
            RequestPRNEntry request = new RequestPRNEntry();
            ResponsePRNEntry response = new ResponsePRNEntry();
            PRNEntryBC bc = new PRNEntryBC();
            response = bc.PRNEntryPageLoadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_PartDetails)
                + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_CustomerDetails)
                + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_PrnentryDetails)
                + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Prnnoget);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        static List<PRNEntryDetailEntity> PRNEntrydet = new List<PRNEntryDetailEntity>();
        public class PRNEntryRequestDetails
        {
            public string PARTNAME { get; set; }
            public string CUSTOMER { get; set; }
            public string MODEL { get; set; }
            public string VARIANT { get; set; }
            public string LOTNO { get; set; }
            //public string INNERQUANTITY { get; set; }
            //public string OUTERQUANTITY { get; set; }
            //public string LHQUANTITY { get; set; }
            //public string RHQUANTITY { get; set; }
            public string QUANTITY { get; set; }
            public string REMARKS { get; set; }
            public string REMOVE { get; set; }
            public string Edit { get; set; }

        }
        public ActionResult AddPRNInventoryDetails()
        {
            List<PRNEntryRequestDetails> listprnInventoryInsertdet = new List<PRNEntryRequestDetails>();

            if (Request.Form["action"].ToString() == "Update")
            {
                //for (int i = listGRNItemdet.Count - 1; i >= 0; i--)
                for (int i = 0; i < PRNEntrydet.Count; i++)
                {
                    if (PRNEntrydet[i].PARTNAME == Request.Form["PARTNAME"])
                    {
                        PRNEntrydet.RemoveAt(i);
                    }
                }
                // GRNDeleteRowEdit(Request.Form["ITEMCODE"], Request.Form["LOTNO"], Request.Form["NETWEIGHT"]);
            }




            int duplicatecount = PRNEntrydet.Where(inventorylist => inventorylist.LOTNO == Request.Form["LOTNO"].ToString() && inventorylist.PARTNAME == Request.Form["PARTNAME"].ToString()).Count();

            string result = "";
            if (duplicatecount == 0)
            {
                PRNEntryDetailEntity PRNetydet = new PRNEntryDetailEntity();

                PRNetydet.PARTNAME = Request.Form["PARTNAME"];
                PRNetydet.CUSTOMER = Request.Form["CUSTOMER"];
                PRNetydet.MODEL = Request.Form["MODEL"];
                PRNetydet.VARIANT = Request.Form["VARIANT"];
                PRNetydet.LOTNO = Request.Form["LOTNO"];
                //  PRNetydet.INNERQUANTITY = Request.Form["INNERQUANTITY"];
                //  PRNetydet.OUTERQUANTITY = Request.Form["OUTERQUANTITY"];
                //PRNetydet.LHQUANTITY = Request.Form["LHQUANTITY"];
                //PRNetydet.RHQUANTITY = Request.Form["RHQUANTITY"];
                PRNetydet.QUANTITY = Request.Form["QUANTITY"];
                PRNetydet.REMARKS = Request.Form["REMARKS"];
                PRNEntrydet.Add(PRNetydet);


                listprnInventoryInsertdet = (from inv in PRNEntrydet.AsEnumerable()
                                             select new PRNEntryRequestDetails
                                             {

                                                 PARTNAME = inv.PARTNAME,
                                                 CUSTOMER = inv.CUSTOMER,
                                                 MODEL = inv.MODEL,
                                                 VARIANT = inv.VARIANT,
                                                 LOTNO = inv.LOTNO,
                                                 //INNERQUANTITY = inv.INNERQUANTITY,
                                                 //OUTERQUANTITY = inv.OUTERQUANTITY,
                                                 //LHQUANTITY = inv.LHQUANTITY,
                                                 //RHQUANTITY = inv.RHQUANTITY,
                                                 QUANTITY = inv.QUANTITY,
                                                 REMARKS = inv.REMARKS
                                             }).ToList();
                result = "true" + "|" + JsonConvert.SerializeObject(listprnInventoryInsertdet);

            }
            else
            {
                result = "false" + "|" + JsonConvert.SerializeObject("Lot No " + Request.Form["LOTNO"].ToString() + " Already Exist.");
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult ClearPRNDetails()
        {

            PRNEntrydet = new List<PRNEntryDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }
        public ActionResult PRNDeleteRow(string Code)
        {

            PRNEntrydet.Remove(PRNEntrydet.Single(r => r.LOTNO == Code));

            List<PRNEntryRequestDetails> listprnInventoryInsertdet = new List<PRNEntryRequestDetails>();

            listprnInventoryInsertdet = (from inv in PRNEntrydet.AsEnumerable()
                                         select new PRNEntryRequestDetails
                                         {

                                             PARTNAME = inv.PARTNAME,
                                             CUSTOMER = inv.CUSTOMER,
                                             MODEL = inv.MODEL,
                                             VARIANT = inv.VARIANT,
                                             LOTNO = inv.LOTNO,
                                             //INNERQUANTITY = inv.INNERQUANTITY,
                                             //OUTERQUANTITY = inv.OUTERQUANTITY,
                                             //LHQUANTITY = inv.LHQUANTITY,
                                             //RHQUANTITY = inv.RHQUANTITY,
                                             QUANTITY = inv.QUANTITY,
                                             REMARKS = inv.REMARKS

                                         }).ToList();


            return Json(JsonConvert.SerializeObject(listprnInventoryInsertdet), JsonRequestBehavior.AllowGet);

        }

        public ActionResult InsertPRNDetails()
        {
            List<PRNEntryRequestDetails> ListPrnMaterialDtls = new List<PRNEntryRequestDetails>();
            RequestPRNEntry request = new RequestPRNEntry();
            ResponsePRNEntry response = new ResponsePRNEntry();

            request.Reqprnentry = new PRNEntryEntity();
            request.requestprnentrydetails = new List<PRNEntryDetailEntity>();
            request.requestprnentry = new List<PRNEntryEntity>();

            request.requestprnentrydetails = PRNEntrydet;


            request.Reqprnentry.PRNNO = Request.Form["PRNNO"];
            if (Request.Form["PRNDATE"] != "")
            {
                string date = Request.Form["PRNDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.Reqprnentry.PRNDATE = ResultedDate.ToString();

            }
            else
            {
                request.Reqprnentry.PRNDATE = "";
            }


            request.Reqprnentry.USERCODE = Session["LoginEmployeeCode"].ToString();

            //request.requestrmlabelprintHeader.Add(request.ReqtrmlabelprintHeader);
            PRNEntryBC bc = new PRNEntryBC();


            string value = "Update";

            //if (request.requestprnentrydetails.Count>0)
            //{
            if (value != Request.Form["actiontype"].ToString())
            {
                response = bc.InsertPRNEntryBC(request);
            }
            else
            {

                response = bc.PRNUpdateBC(request);
            }

            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["prnentrydetails"] = null;
                PRNEntrydet = new List<PRNEntryDetailEntity>();
                return Json(resultjson);
            }
            // }
            //else
            //{
            //    resultjson = "count" + "|" + "";
            //}


            return Json(resultjson);
        }
        public ActionResult PRNViewDts(string PRNNO)
        {
            RequestPRNEntry request = new RequestPRNEntry();
            ResponsePRNEntry response = new ResponsePRNEntry();
            request.Reqprnentry = new PRNEntryEntity();
            request.Reqprnentry.PRNNO = PRNNO;
            PRNEntryBC bc = new PRNEntryBC();
            response = bc.PRNViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_PrnentryDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        public ActionResult PRNEditDts(string PRNNO)
        {
            TempData["prnentrydetails"] = null;
            PRNEntrydet = new List<PRNEntryDetailEntity>();

            RequestPRNEntry request = new RequestPRNEntry();
            ResponsePRNEntry response = new ResponsePRNEntry();
            request.Reqprnentry = new PRNEntryEntity();
            request.Reqprnentry.PRNNO = PRNNO;
            PRNEntryBC bc = new PRNEntryBC();
            response = bc.PRNEditDtsBC(request);

            for (int i = 0; i < response.PrnDetails.Rows.Count; i++)
            {
                PRNEntryDetailEntity PRNEdit = new PRNEntryDetailEntity();
                PRNEdit.PARTNAME = response.PrnDetails.Rows[i]["PARTNAME"].ToString();
                PRNEdit.CUSTOMER = response.PrnDetails.Rows[i]["CUSTOMER"].ToString();
                PRNEdit.MODEL = response.PrnDetails.Rows[i]["MODEL"].ToString();
                PRNEdit.VARIANT = response.PrnDetails.Rows[i]["VARIANT"].ToString();
                PRNEdit.LOTNO = response.PrnDetails.Rows[i]["LOTNO"].ToString();
                //  PRNEdit.INNERQUANTITY = response.PrnDetails.Rows[i]["INNERQUANTITY"].ToString();
                //  PRNEdit.OUTERQUANTITY = response.PrnDetails.Rows[i]["OUTERQUANTITY"].ToString();
                //PRNEdit.LHQUANTITY = response.PrnDetails.Rows[i]["LHQUANTITY"].ToString();
                //PRNEdit.RHQUANTITY = response.PrnDetails.Rows[i]["RHQUANTITY"].ToString();
                PRNEdit.QUANTITY = response.PrnDetails.Rows[i]["QUANTITY"].ToString();
                PRNEdit.REMARKS = response.PrnDetails.Rows[i]["REMARKS"].ToString();

                PRNEntrydet.Add(PRNEdit);
            }
            TempData["prnentrydetails"] = PRNEntrydet;

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_PartDetails) + "|" +
                       Utility.DataTableToJSONWithJavaScriptSerializer(response.PrnDetails);

            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        #endregion

        //Remix -Job Process
        #region RemixJobProcess ............................................................................
        public ActionResult RemixJobProcess()
        {
            return View();
        }

        public ActionResult JobProcessPageLoad()
        {
            listRemixjobprocessdet = new List<RemixJobProcessDetailEntity>();
            RequestRemixJobProcess request = new RequestRemixJobProcess();
            ResponseRemixJobProcess response = new ResponseRemixJobProcess();
            RemixJobProcessBC bc = new RemixJobProcessBC();
            response = bc.PageloadRemixJobProcessBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails)
                + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_RemixjobProcessdetails)
                + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_jobprocessno);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult FetchJobProcessGetItemno(string ITEMCODE)
        {
            ResponseRemixJobProcess response = new ResponseRemixJobProcess();
            RequestRemixJobProcess request = new RequestRemixJobProcess();
            request.ReqtRemixJobProcess = new RemixjobProcessEntity();
            request.ReqtRemixJobProcess.ITEMCODE = ITEMCODE;
            RemixJobProcessBC bc = new RemixJobProcessBC();
            response = bc.RemixJobProcessItemnameFetchBC(request);

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemname);
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        //btn add remix job process temp
        public class JobProcessDetails
        {

            public string ITEMCODE { get; set; }
            public string ITEMNAME { get; set; }
            public string WEIGHT { get; set; }

        }

        static List<RemixJobProcessDetailEntity> listRemixjobprocessdet = new List<RemixJobProcessDetailEntity>();

        public ActionResult AddRemixJobProcessDetails()
        {

            List<JobProcessDetails> listRemixjobprocessInsertdet = new List<JobProcessDetails>();

            if (Request.Form["action"].ToString() == "Update")
            {
                for (int i = listRemixjobprocessdet.Count - 1; i >= 0; i--)
                {
                    if (listRemixjobprocessdet[i].ITEMCODE == Request.Form["ItemCode"])
                    {
                        listRemixjobprocessdet.RemoveAt(i);
                    }
                }

            }


            int duplicatecount = listRemixjobprocessdet.Where(inventorylist => inventorylist.ITEMCODE == Request.Form["ItemCode"].ToString()).Count();

            string data = "";
            if (duplicatecount == 0)
            {
                RemixJobProcessDetailEntity Itemdts = new RemixJobProcessDetailEntity();


                Itemdts.ITEMCODE = Request.Form["ItemCode"];
                Itemdts.ITEMNAME = Request.Form["ItemName"];
                Itemdts.WEIGHT = Request.Form["Weight"];
                listRemixjobprocessdet.Add(Itemdts);


                listRemixjobprocessInsertdet = (from inv in listRemixjobprocessdet.AsEnumerable()
                                                select new JobProcessDetails
                                                {

                                                    ITEMCODE = inv.ITEMCODE,
                                                    ITEMNAME = inv.ITEMNAME,
                                                    WEIGHT = inv.WEIGHT,
                                                }).ToList();
                data = "true" + "|" + JsonConvert.SerializeObject(listRemixjobprocessInsertdet);

            }
            else
            {
                data = "false" + "|" + JsonConvert.SerializeObject("Item Code " + Request.Form["ITEMCODE"].ToString() + " Already Exist.");
            }
            //TempData["InventoryInsert"] = listInventorydet;
            return Json(data, JsonRequestBehavior.AllowGet);

        }
        public ActionResult RemixJobProcessDeleteRow(string Code)
        {

            listRemixjobprocessdet.Remove(listRemixjobprocessdet.Single(r => r.ITEMCODE == Code));

            List<JobProcessDetails> listRemixjobprocessitemInsertdet = new List<JobProcessDetails>();

            listRemixjobprocessitemInsertdet = (from inv in listRemixjobprocessdet.AsEnumerable()
                                                select new JobProcessDetails
                                                {


                                                    ITEMCODE = inv.ITEMCODE,
                                                    ITEMNAME = inv.ITEMNAME,
                                                    WEIGHT = inv.WEIGHT,

                                                }).ToList();


            return Json(JsonConvert.SerializeObject(listRemixjobprocessitemInsertdet), JsonRequestBehavior.AllowGet);

        }

        //Insert   
        [HttpPost]
        public ActionResult InsertRemixJobProcessDetails()
        {

            RequestRemixJobProcess request = new RequestRemixJobProcess();
            ResponseRemixJobProcess response = new ResponseRemixJobProcess();
            request.ReqtRemixJobProcess = new RemixjobProcessEntity();
            request.requestRemixJobProcessdetails = listRemixjobprocessdet;
            request.ReqtRemixJobProcess.JOBPROCESSNO = Request.Form["JOBPROCESSNO"];
            if (Request.Form["JOBPROCESSDATE"] != "")
            {
                string date = Request.Form["JOBPROCESSDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.ReqtRemixJobProcess.JOBPROCESSDATE = ResultedDate.ToString();

            }
            else
            {
                request.ReqtRemixJobProcess.JOBPROCESSDATE = "";
            }

            //request.ReqGRNEntry.SUPPLIER = Request.Form["SUPPLIER"];
            //request.ReqGRNEntry.USERCODE = Session["LoginEmployeeCode"].ToString();
            //request.ReqGRNEntry.REFERENCENO = Request.Form["REFERENCENO"];


            RemixJobProcessBC bc = new RemixJobProcessBC();
            string value = "Update";

            if (value != Request.Form["actiontype"].ToString())
            {
                response = bc.RemixJobProcessInsertBC(request);
            }
            else
            {

                response = bc.RemixJobProcessUpdateBC(request);
            }


            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["REMIXJOBPROCESSINSERT"] = null;
                listRemixjobprocessdet = new List<RemixJobProcessDetailEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }

        public ActionResult RemixJobProcessViewDts(string JOBPROCESSNO)
        {
            RequestRemixJobProcess request = new RequestRemixJobProcess();
            ResponseRemixJobProcess response = new ResponseRemixJobProcess();
            request.ReqtRemixJobProcess = new RemixjobProcessEntity();
            request.ReqtRemixJobProcess.JOBPROCESSNO = JOBPROCESSNO;
            RemixJobProcessBC bc = new RemixJobProcessBC();
            response = bc.RemixJobProcessViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.RemixjobProcessDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        public ActionResult RemixJobProcessEditDts(string JOBPROCESSNO)
        {
            RequestRemixJobProcess request = new RequestRemixJobProcess();
            ResponseRemixJobProcess response = new ResponseRemixJobProcess();
            request.ReqtRemixJobProcess = new RemixjobProcessEntity();
            request.ReqtRemixJobProcess.JOBPROCESSNO = JOBPROCESSNO;
            RemixJobProcessBC bc = new RemixJobProcessBC();
            response = bc.RemixJobProcessEditDtsBC(request);

            for (int i = 0; i < response.RemixjobProcessDetails.Rows.Count; i++)
            {
                RemixJobProcessDetailEntity RemixjobProcessEdit = new RemixJobProcessDetailEntity();

                RemixjobProcessEdit.ITEMCODE = response.RemixjobProcessDetails.Rows[i]["ITEMCODE"].ToString();
                RemixjobProcessEdit.ITEMNAME = response.RemixjobProcessDetails.Rows[i]["ITEMNAME"].ToString();
                RemixjobProcessEdit.WEIGHT = response.RemixjobProcessDetails.Rows[i]["WEIGHT"].ToString();

                listRemixjobprocessdet.Add(RemixjobProcessEdit);
            }
            TempData["REMIXJOBPROCESSINSERT"] = listRemixjobprocessdet;

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.RemixjobProcessHeader) + "|" +
                       Utility.DataTableToJSONWithJavaScriptSerializer(response.RemixjobProcessDetails);

            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult ClearRemixJobProcessDetails()
        {

            listRemixjobprocessdet = new List<RemixJobProcessDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region.................... Forming Plant

        public ActionResult FormingPlan()
        {
            return View();
        }

        public ActionResult FormingPlanPageLoad()
        {
            listFormingItemdet = new List<FormingPlanDetailEntity>();

            RequestFormingPlanEntry request = new RequestFormingPlanEntry();
            ResponseFormingPlanEntry response = new ResponseFormingPlanEntry();
            FormingPlanEntryBC bc = new FormingPlanEntryBC();
            response = bc.PageloadFormingplanBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.FormingPlanHeader)
                         //+ "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.FormingDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        static List<FormingPlanDetailEntity> listFormingItemdet = new List<FormingPlanDetailEntity>();


        public ActionResult FormingItemnameFetch(string ITEMCODE)
        {


            RequestFormingPlanEntry request = new RequestFormingPlanEntry();
            ResponseFormingPlanEntry response = new ResponseFormingPlanEntry();
            request.ReqFormingPlanEntry = new FormingPlanEntity();
            request.ReqFormingPlanEntry.ITEMCODE = ITEMCODE;
            FormingPlanEntryBC bc = new FormingPlanEntryBC();
            response = bc.FormingplanItemnameFetchBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }






        public class FormingPlanItemDetails
        {
            public string ItemCode { get; set; }
            public string ItemName { get; set; }

            public string Weight { get; set; }

            public string Remove { get; set; }

        }

        public ActionResult AddFormingPlanItemDetails()
        {
            List<FormingPlanItemDetails> listFormingItemInsertdet = new List<FormingPlanItemDetails>();


            if (Request.Form["action"].ToString() == "Update")
            {
                for (int i = listFormingItemdet.Count - 1; i >= 0; i--)
                {
                    if (listFormingItemdet[i].ITEMCODE == Request.Form["ITEMCODE"])
                    {
                        listFormingItemdet.RemoveAt(i);
                    }
                }

            }

            int duplicatecount = listFormingItemdet.Where(inventorylist => inventorylist.ITEMCODE == Request.Form["ITEMCODE"].ToString()).Count();

            string data = "";
            if (duplicatecount == 0)
            {
                FormingPlanDetailEntity Itemdts = new FormingPlanDetailEntity();

                Itemdts.ITEMCODE = Request.Form["ITEMCODE"];
                Itemdts.ITEMNAME = Request.Form["ITEMNAME"];
                Itemdts.WEIGHT = Request.Form["WEIGHT"];

                listFormingItemdet.Add(Itemdts);


                listFormingItemInsertdet = (from inv in listFormingItemdet.AsEnumerable()
                                            select new FormingPlanItemDetails
                                            {

                                                ItemCode = inv.ITEMCODE,
                                                ItemName = inv.ITEMNAME,

                                                Weight = inv.WEIGHT,


                                            }).ToList();
                data = "true" + "|" + JsonConvert.SerializeObject(listFormingItemInsertdet);

            }
            else
            {
                data = "false" + "|" + JsonConvert.SerializeObject("Item Code " + Request.Form["ITEMCODE"].ToString() + " Already Exist.");
            }
            //TempData["InventoryInsert"] = listInventorydet;
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult FormingPlanDeleteRow(string Code)
        {

            listFormingItemdet.Remove(listFormingItemdet.Single(r => r.ITEMCODE == Code));

            List<FormingPlanItemDetails> listFormingEntryInsertdet = new List<FormingPlanItemDetails>();

            listFormingEntryInsertdet = (from inv in listFormingItemdet.AsEnumerable()
                                         select new FormingPlanItemDetails
                                         {

                                             ItemCode = inv.ITEMCODE,
                                             ItemName = inv.ITEMNAME,
                                             Weight = inv.WEIGHT,


                                         }).ToList();


            return Json(JsonConvert.SerializeObject(listFormingEntryInsertdet), JsonRequestBehavior.AllowGet);

        }

        public ActionResult InsertFormingPlanDetails()
        {

            RequestFormingPlanEntry request = new RequestFormingPlanEntry();
            ResponseFormingPlanEntry response = new ResponseFormingPlanEntry();
            request.ReqFormingPlanEntry = new FormingPlanEntity();
            request.FormingPlanDetailEntity = listFormingItemdet;
            request.ReqFormingPlanEntry.FormingPlantNO = Request.Form["FRNNO"];
            if (Request.Form["FRNDATE"] != "")
            {
                string date = Request.Form["FRNDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.ReqFormingPlanEntry.FormingPlantDate = ResultedDate.ToString();

            }
            else
            {
                request.ReqFormingPlanEntry.FormingPlantDate = "";
            }

            //request.ReqGRNEntry.SUPPLIER = Request.Form["SUPPLIER"];
            request.ReqFormingPlanEntry.USERCODE = Session["LoginEmployeeCode"].ToString();
            request.ReqFormingPlanEntry.Remarks = Request.Form["REMARKS"];


            FormingPlanEntryBC bc = new FormingPlanEntryBC();
            string value = "Update";

            if (value != Request.Form["actiontype"].ToString())
            {
                response = bc.FormingPlanInsertBC(request);
            }
            else
            {

                response = bc.FormingPlanUpdateBC(request);
            }


            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["FORMINGPLANINSERT"] = null;
                listFormingItemdet = new List<FormingPlanDetailEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }


        public ActionResult ClearFRNDetails()
        {

            listFormingItemdet = new List<FormingPlanDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }


        public ActionResult FRPNOEditDts(string FRPNo)
        {
            RequestFormingPlanEntry request = new RequestFormingPlanEntry();
            ResponseFormingPlanEntry response = new ResponseFormingPlanEntry();
            request.ReqFormingPlanEntry = new FormingPlanEntity();
            request.ReqFormingPlanEntry.FormingPlantNO = FRPNo;
            FormingPlanEntryBC bc = new FormingPlanEntryBC();
            response = bc.FormingPlanEditDtsBC(request);

            for (int i = 0; i < response.FormingDetails.Rows.Count; i++)
            {
                FormingPlanDetailEntity FormingEdit = new FormingPlanDetailEntity();

                FormingEdit.ITEMCODE = response.FormingDetails.Rows[i]["ItemCode"].ToString();
                FormingEdit.ITEMNAME = response.FormingDetails.Rows[i]["ItemName"].ToString();
                FormingEdit.WEIGHT = response.FormingDetails.Rows[i]["Weight"].ToString();

                listFormingItemdet.Add(FormingEdit);
            }
            TempData["FORMINGINSERT"] = listFormingItemdet;

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.FormingPlanHeader) + "|" +
                       Utility.DataTableToJSONWithJavaScriptSerializer(response.FormingDetails);

            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult FPNViewDts(string FPNNO)
        {
            RequestFormingPlanEntry request = new RequestFormingPlanEntry();
            ResponseFormingPlanEntry response = new ResponseFormingPlanEntry();
            request.ReqFormingPlanEntry = new FormingPlanEntity();
            request.ReqFormingPlanEntry.FormingPlantNO = FPNNO;
            FormingPlanEntryBC bc = new FormingPlanEntryBC();
            response = bc.FPNViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.FormingDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }


        #endregion

        #region REMIXBARCODE ............................................................................

        public ActionResult REMIXLabelPrint()
        {
            return View();
        }

        public ActionResult GetREMIXBarcodeLabelPrintPageLoad()
        {
            RequestREMIXBarcodeLabelPrint request = new RequestREMIXBarcodeLabelPrint();
            ResponseREMIXBarcodeLabelPrint response = new ResponseREMIXBarcodeLabelPrint();
            REMIXBarcodelabelBC bc = new REMIXBarcodelabelBC();
            response = bc.FetchREMIXBarcodeLabe1PrintPageLoadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_JobProcessno)
                + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_JobProcessdetails)
                + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_REMIXLablePrintDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public class REMIXBarcodeLabelPrintRequestDetails
        {
            public string JOBPROCESSNO { get; set; }
            public string ITEMCODE { get; set; }
            public string SERIALNO { get; set; }
            public string QUANTITY { get; set; }
            public string NETWEIGHT { get; set; }

        }
        public class REMIXPopupLabelPrintRequestDetails
        {
            public string JOBPROCESSNO { get; set; }
            public string ITEMCODE { get; set; }
            public string SERIALNO { get; set; }
            public string QUANTITY { get; set; }
            public string ACTUAL { get; set; }
            public string NETWEIGHT { get; set; }


        }
        static List<REMIXBarcodelabelDetailEntity> REMIXLabelPrintdet = new List<REMIXBarcodelabelDetailEntity>();
        static List<REMIXBarcodelabelDetailEntity> REMIXPopupLabelPrintdet = new List<REMIXBarcodelabelDetailEntity>();

        public ActionResult AddInventoryDetail()
        {
            List<REMIXBarcodeLabelPrintRequestDetails> listInventoryInsertdet = new List<REMIXBarcodeLabelPrintRequestDetails>();


            int duplicatecount = REMIXLabelPrintdet.Where(inventorylist => inventorylist.JOBPROCESSNO == Request.Form["JOBPROCESSNO"].ToString()).Count();

            string result = "";
            if (duplicatecount == 0)
            {
                REMIXBarcodelabelDetailEntity REMIXLblPrintdet = new REMIXBarcodelabelDetailEntity();

                REMIXLblPrintdet.JOBPROCESSNO = Request.Form["JOBPROCESSNO"];
                REMIXLblPrintdet.ITEMCODE = Request.Form["ITEMCODE"];
                REMIXLblPrintdet.SERIALNO = Request.Form["QUANTITY"] + "/" + Request.Form["QUANTITY"];
                REMIXLblPrintdet.QUANTITY = Request.Form["QUANTITY"];
                REMIXLblPrintdet.NETWEIGHT = Request.Form["NETWEIGHT"];
                REMIXLabelPrintdet.Add(REMIXLblPrintdet);


                listInventoryInsertdet = (from inv in REMIXLabelPrintdet.AsEnumerable()
                                          select new REMIXBarcodeLabelPrintRequestDetails
                                          {

                                              JOBPROCESSNO = inv.JOBPROCESSNO,
                                              ITEMCODE = inv.ITEMCODE,
                                              SERIALNO = inv.SERIALNO,
                                              QUANTITY = inv.QUANTITY,
                                              NETWEIGHT = inv.NETWEIGHT,

                                          }).ToList();
                result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

            }
            else
            {
                result = "false" + "|" + JsonConvert.SerializeObject("Job Order No " + Request.Form["JOBPROCESSNO"].ToString() + " Already Exist.");
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AddPopupInventoryDetail()
        {
            List<REMIXPopupLabelPrintRequestDetails> listInventoryInsertdet = new List<REMIXPopupLabelPrintRequestDetails>();


            int duplicatecount = REMIXPopupLabelPrintdet.Where(inventorylist => inventorylist.JOBPROCESSNO == Request.Form["JOBPROCESSNO"].ToString()).Count();
            decimal sumactual = (from emp in REMIXPopupLabelPrintdet
                                 select emp).Sum(e => Convert.ToDecimal(e.ACTUAL));



            string result = "";
            //{
            REMIXBarcodelabelDetailEntity REMIXLblPrintdet = new REMIXBarcodelabelDetailEntity();

            REMIXLblPrintdet.JOBPROCESSNO = Request.Form["jobprocessno"];
            REMIXLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
            REMIXLblPrintdet.SERIALNO = Convert.ToString(REMIXPopupLabelPrintdet.Count + 1) + "/" + Request.Form["Quantity"];
            REMIXLblPrintdet.QUANTITY = Request.Form["Quantity"];
            REMIXLblPrintdet.ACTUAL = Request.Form["actual"];
            REMIXLblPrintdet.NETWEIGHT = Request.Form["NetWeight"];
            REMIXPopupLabelPrintdet.Add(REMIXLblPrintdet);
            int qty = Convert.ToInt32(Request.Form["Quantity"]);


            listInventoryInsertdet = (from inv in REMIXPopupLabelPrintdet.AsEnumerable()
                                      select new REMIXPopupLabelPrintRequestDetails
                                      {

                                          JOBPROCESSNO = inv.JOBPROCESSNO,
                                          ITEMCODE = inv.ITEMCODE,
                                          SERIALNO = inv.SERIALNO,
                                          QUANTITY = inv.QUANTITY,
                                          NETWEIGHT = inv.NETWEIGHT,
                                          ACTUAL = inv.ACTUAL,
                                      }).ToList();
            if (listInventoryInsertdet.Count <= qty)
            {
                result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);
            }



            else
            {
                result = "false" + "|" + JsonConvert.SerializeObject("Total Quantity should not Exceed " + Request.Form["Quantity"].ToString());
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult OkInventoryDetail()
        {
            List<REMIXBarcodeLabelPrintRequestDetails> listInventoryInsertdet = new List<REMIXBarcodeLabelPrintRequestDetails>();

            string result = "";
            int QUANTITY = Convert.ToInt32(Request.Form["Quantity"]);
            listInventoryInsertdet = (from inv in REMIXLabelPrintdet.AsEnumerable()
                                      select new REMIXBarcodeLabelPrintRequestDetails
                                      {

                                          JOBPROCESSNO = inv.JOBPROCESSNO,
                                          ITEMCODE = inv.ITEMCODE,
                                          SERIALNO = inv.SERIALNO,
                                          QUANTITY = inv.QUANTITY,
                                          NETWEIGHT = inv.NETWEIGHT,
                                      }).ToList();

            listInventoryInsertdet = (from inv in REMIXPopupLabelPrintdet.AsEnumerable()
                                      select new REMIXBarcodeLabelPrintRequestDetails
                                      {

                                          JOBPROCESSNO = inv.JOBPROCESSNO,
                                          ITEMCODE = inv.ITEMCODE,
                                          SERIALNO = inv.SERIALNO,
                                          QUANTITY = inv.QUANTITY,
                                          NETWEIGHT = inv.NETWEIGHT,
                                          // NETWEIGHT = inv.ACTUAL,
                                      }).ToList();

            if (listInventoryInsertdet.Count == QUANTITY)
            {
                result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);
            }
            //  }

            else
            {
                result = "false" + "|" + JsonConvert.SerializeObject("Please Enter Quantity Value");
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }



        public ActionResult InsertREMIXLabelPrintDetails(string jobprocessno, string itemcode, string itemname, string lotno, string serialno, string quantity, string netweight, string actual)
        {
            List<REMIXBarcodeLabelPrintRequestDetails> ListMaterialDtls = new List<REMIXBarcodeLabelPrintRequestDetails>();
            RequestREMIXBarcodeLabelPrint request = new RequestREMIXBarcodeLabelPrint();
            ResponseREMIXBarcodeLabelPrint response = new ResponseREMIXBarcodeLabelPrint();

            request.requestremixlabelprintdetails = new List<REMIXBarcodelabelDetailEntity>();

            string[] jobprocessnoarr = jobprocessno.Split('^');
            string[] itemcodearr = itemcode.Split('^');
            string[] serialnoarr = serialno.Split('^');
            string[] quantityarr = quantity.Split('^');
            string[] actualarr = actual.Split('^');
            string[] netweightarr = netweight.Split('^');
            string barcode = DateTime.Now.Ticks.ToString();
            string strbarcode = "";
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < jobprocessnoarr.Length; i++)
            {
                REMIXBarcodelabelDetailEntity det = new REMIXBarcodelabelDetailEntity();
                det.JOBPROCESSNO = jobprocessnoarr[i];
                det.ITEMCODE = itemcodearr[i];
                det.SERIALNO = serialnoarr[i];
                det.QUANTITY = quantityarr[i];
                //det.ACTUAL = actualarr[i];
                det.NETWEIGHT = netweightarr[i];
                det.BARCODE = "R" + barcode + serialnoarr[i];
                request.requestremixlabelprintdetails.Add(det);
                strbarcode += barcode + serialnoarr[i] + "^";

                String test = @"<svg style='margin-top:2px;margin-left:30px;margin-right:0px;height:130px;width:300px;' id='$qrcode$'></svg><div><span style='font-weight: 900;font-size: 12px;margin-left:10px;'>JobProcessNo</span><span> : </span><span style='font-size: 12px;'>$JOBPROCESSNO$</span></div><div><span style='font-weight: 900;font-size: 12px;margin-left:10px;'>Itemcode</span><span> : </span><span style='font-size: 12px;'>$ITEMCODE$</span></div><div><span style='font-weight: 900;font-size: 12px;margin-left:10px;'>Quantity</span><span> : </span><span style='font-size: 12px;'>$QUANTIY$</span></div><div><span style='font-weight: 900;font-size: 12px;margin-left:10px;'>SerialNo</span><span> : </span><span style='font-size: 12px;'>$SERIALNO$</span></div>";

                byte[] byteArray = Encoding.ASCII.GetBytes(test);
                MemoryStream stream = new MemoryStream(byteArray);
                // StreamReader streamReader = new StreamReader(stream);
                StreamReader streamReader = new StreamReader(BARCODENO);
                string str_ = streamReader.ReadToEnd();
                string str_2 = str_;
                str_2 = str_2.Replace("$JOBPROCESSNO$", jobprocessnoarr[i]);
                //str_2 = str_2.Replace("$qrcode$", "qrcode" + i);
                str_2 = str_2.Replace("$ITEMCODE$", itemcodearr[i]);
                str_2 = str_2.Replace("$QUANTIY$", quantityarr[i]);
                // str_2 = str_2.Replace("$SERIALNO$", serialnoarr[i]);
                stringBuilder.Append(str_2);
            }

            if (strbarcode.Length > 0)
                strbarcode = strbarcode.Substring(0, strbarcode.Length - 1);
            REMIXBarcodelabelBC bc = new REMIXBarcodelabelBC();
            response = bc.InsertTempREMIXLabelPrintBC(request);
            var data = stringBuilder.ToString();
            if (response.result == true)
            {
                // string strdata = response.result + "|" + data;
                string strdata = response.result + "|" + data + "|" + strbarcode;
                // + "|" + strbarcode
                TempData["labeldetail"] = null;
                REMIXLabelPrintdet = new List<REMIXBarcodelabelDetailEntity>();
                return Json(strdata);
            }
            else
            {
                string strdata = Convert.ToString(response.result);
                return Json(strdata);
            }
        }
        public ActionResult FetchREMIXLabelPrintGetHiddenValue(string joborderNo, string itemcode)
        {
            ResponseREMIXBarcodeLabelPrint response = new ResponseREMIXBarcodeLabelPrint();
            RequestREMIXBarcodeLabelPrint request = new RequestREMIXBarcodeLabelPrint();
            request.ReqremixlabelprintHeader = new REMIXBarcodelabelEntity();
            request.ReqremixlabelprintHeader.JOBPROCESSNO = joborderNo;
            request.ReqremixlabelprintHeader.ITEMCODE = itemcode;
            REMIXBarcodelabelBC bc = new REMIXBarcodelabelBC();
            response = bc.FetchREMIXLabelPrintGetHdnValue(request);

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Hiddendetails);
            return Json(data, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FetchREMIXLabelPrintGetLotNoByNO(string joborderNo)
        {
            ResponseREMIXBarcodeLabelPrint response = new ResponseREMIXBarcodeLabelPrint();
            RequestREMIXBarcodeLabelPrint request = new RequestREMIXBarcodeLabelPrint();
            request.ReqremixlabelprintHeader = new REMIXBarcodelabelEntity();
            request.ReqremixlabelprintHeader.JOBPROCESSNO = joborderNo;
            REMIXBarcodelabelBC bc = new REMIXBarcodelabelBC();
            response = bc.FetchREMIXLabelPrintLotNobyJobnoBC(request);

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_No);
            return Json(data, JsonRequestBehavior.AllowGet);
        }
        #endregion REMIXBARCODE



        #region SRNEntry ............................................................................
        public ActionResult SRNEntry()
        {
            return View();
        }

        public ActionResult PageloadSRNBC()
        {
            listSRNItemdet = new List<SRNDetailEntity>();

            RequestSRNEntry request = new RequestSRNEntry();
            ResponseSRNEntry response = new ResponseSRNEntry();
            SRNEntryBC bc = new SRNEntryBC();
            response = bc.PageloadSRNBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.SRNDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult SRNItemnameFetch(string ITEMCODE)
        {
            RequestSRNEntry request = new RequestSRNEntry();
            ResponseSRNEntry response = new ResponseSRNEntry();
            request.ReqSRNEntry = new SRNEntryEntity();
            request.ReqSRNEntry.ITEMCODE = ITEMCODE;
            SRNEntryBC bc = new SRNEntryBC();
            response = bc.SRNItemnameFetchBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public class SRNItemDetails
        {
            public string ItemCode { get; set; }
            public string ItemName { get; set; }
            public string Quantity { get; set; }
            public string UOM { get; set; }
            public string Specs { get; set; }
            public string Project { get; set; }
            public string Remove { get; set; }

        }

        static List<SRNDetailEntity> listSRNItemdet = new List<SRNDetailEntity>();

        public ActionResult AddSRNItemDetails()
        {
            List<SRNItemDetails> listSRNItemInsertdet = new List<SRNItemDetails>();


            if (Request.Form["action"].ToString() == "Update")
            {
                for (int i = listSRNItemdet.Count - 1; i >= 0; i--)
                {
                    if (listSRNItemdet[i].ITEMCODE == Request.Form["ITEMCODE"])
                    {
                        listSRNItemdet.RemoveAt(i);
                    }
                }

            }

            int duplicatecount = listSRNItemdet.Where(inventorylist => inventorylist.ITEMCODE == Request.Form["ITEMCODE"].ToString()).Count();

            string data = "";
            if (duplicatecount == 0)
            {
                SRNDetailEntity Itemdts = new SRNDetailEntity();

                Itemdts.ITEMCODE = Request.Form["ITEMCODE"];
                Itemdts.ITEMNAME = Request.Form["ITEMNAME"];
                Itemdts.QUANTITY = Request.Form["QTY"];
                Itemdts.UOM = Request.Form["UOMCODE"] + '+' + Request.Form["UOM"];
                Itemdts.SPECS = Request.Form["SPECS"];
                Itemdts.PROJECT = Request.Form["PROJECT"];
                listSRNItemdet.Add(Itemdts);


                listSRNItemInsertdet = (from inv in listSRNItemdet.AsEnumerable()
                                        select new SRNItemDetails
                                        {

                                            ItemCode = inv.ITEMCODE,
                                            ItemName = inv.ITEMNAME,
                                            Quantity = inv.QUANTITY,
                                            //UOM = inv.UOM.Split('+')[0],
                                            UOM = inv.UOM,
                                            Specs = inv.SPECS,
                                            Project = inv.PROJECT,
                                        }).ToList();
                data = "true" + "|" + JsonConvert.SerializeObject(listSRNItemInsertdet);

            }
            else
            {
                data = "false" + "|" + JsonConvert.SerializeObject("Item Code " + Request.Form["ITEMCODE"].ToString() + " Already Exist.");
            }
            //TempData["InventoryInsert"] = listInventorydet;
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SRNDeleteRow(string Code)
        {

            listSRNItemdet.Remove(listSRNItemdet.Single(r => r.ITEMCODE == Code));

            List<SRNItemDetails> listSRNEntryInsertdet = new List<SRNItemDetails>();

            listSRNEntryInsertdet = (from inv in listSRNItemdet.AsEnumerable()
                                     select new SRNItemDetails
                                     {

                                         ItemCode = inv.ITEMCODE,
                                         ItemName = inv.ITEMNAME,
                                         Quantity = inv.QUANTITY,
                                         UOM = inv.UOM,
                                         Specs = inv.SPECS,
                                         Project = inv.PROJECT,

                                     }).ToList();


            return Json(JsonConvert.SerializeObject(listSRNEntryInsertdet), JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public ActionResult InsertSRNDetails()
        {

            RequestSRNEntry request = new RequestSRNEntry();
            ResponseSRNEntry response = new ResponseSRNEntry();
            request.ReqSRNEntry = new SRNEntryEntity();
            request.requestSRNEntrydetails = listSRNItemdet;
            request.ReqSRNEntry.SRNNO = Request.Form["SRNNO"];
            if (Request.Form["SRNDATE"] != "")
            {
                string date = Request.Form["SRNDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.ReqSRNEntry.SRNDATE = ResultedDate.ToString();

            }
            else
            {
                request.ReqSRNEntry.SRNDATE = "";
            }

            request.ReqSRNEntry.REMARKS = Request.Form["REMARKS"];
            request.ReqSRNEntry.USERCODE = Session["LoginEmployeeCode"].ToString();


            SRNEntryBC bc = new SRNEntryBC();
            string value = "Update";

            if (value != Request.Form["actiontype"].ToString())
            {
                response = bc.SRNInsertBC(request);
            }
            else
            {

                response = bc.SRNUpdateBC(request);
            }


            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["SRNINSERT"] = null;
                listSRNItemdet = new List<SRNDetailEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }
        public ActionResult SRNViewDts(string SRNNO)
        {
            RequestSRNEntry request = new RequestSRNEntry();
            ResponseSRNEntry response = new ResponseSRNEntry();
            request.ReqSRNEntry = new SRNEntryEntity();
            request.ReqSRNEntry.SRNNO = SRNNO;
            SRNEntryBC bc = new SRNEntryBC();
            response = bc.SRNViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.SRNDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }
        public ActionResult SRNEditDts(string SRNNO)
        {
            RequestSRNEntry request = new RequestSRNEntry();
            ResponseSRNEntry response = new ResponseSRNEntry();
            request.ReqSRNEntry = new SRNEntryEntity();
            request.ReqSRNEntry.SRNNO = SRNNO;
            SRNEntryBC bc = new SRNEntryBC();
            response = bc.SRNEditDtsBC(request);

            for (int i = 0; i < response.SRNDetails.Rows.Count; i++)
            {
                SRNDetailEntity SRNEdit = new SRNDetailEntity();

                SRNEdit.ITEMCODE = response.SRNDetails.Rows[i]["ItemCode"].ToString();
                SRNEdit.ITEMNAME = response.SRNDetails.Rows[i]["ItemName"].ToString();
                SRNEdit.QUANTITY = response.SRNDetails.Rows[i]["Quantity"].ToString();
                SRNEdit.UOM = response.SRNDetails.Rows[i]["UOM"].ToString();
                SRNEdit.SPECS = response.SRNDetails.Rows[i]["Specs"].ToString();
                SRNEdit.PROJECT = response.SRNDetails.Rows[i]["Project"].ToString();
                listSRNItemdet.Add(SRNEdit);
            }
            //TempData["SRNINSERT"] = listSRNItemdet;

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.SRNHeader) + "|" +
                       Utility.DataTableToJSONWithJavaScriptSerializer(response.SRNDetails);

            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult ClearSRNDetails()
        {

            listSRNItemdet = new List<SRNDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region SRNUpload ............................................................................
        public ActionResult SRNUpload()
        {
            return View();
        }
        public class Uploadfile
        {
            public string SRNNO { get; set; }
            public string ITEMCODE { get; set; }
            public string ITEMNAME { get; set; }
            public string LOTNO { get; set; }
            public string QUANTITY { get; set; }
            public string NETWEIGHT { get; set; }
            public string GROSSWEIGHT { get; set; }
            public string FRICTIONPARTICLE { get; set; }
        }
        static List<SRNFileUploadDetailEntity> listUploadItemdet = new List<SRNFileUploadDetailEntity>();

        private string connectionString;
        private string connectionstring;
        public ActionResult SRNUploads()
        {
            List<SRNItemDetails> listSRNItemInsertdet = new List<SRNItemDetails>();
            string results = "";
            string data = "";
            IExcelDataReader reader = null;
            DataTable dataTable = null;
            if (Request.Files.Count > 0)
            {
                try
                {
                    HttpFileCollectionBase files = Request.Files;
                    string filePath = string.Empty;
                    string path = Server.MapPath("~/Uploads/");
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }
                    var postedFile = System.Web.HttpContext.Current.Request.Files["CsvDoc"];
                    filePath = path + Path.GetFileName(postedFile.FileName);
                    string extension = Path.GetExtension(postedFile.FileName);
                    postedFile.SaveAs(filePath);
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if (file.FileName == postedFile.FileName)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                Stream stream = file.InputStream;

                                if (file.FileName.EndsWith(".xls"))
                                {
                                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                                }
                                else if (file.FileName.EndsWith(".xlsx"))
                                {
                                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                                }
                                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                                {
                                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                                    {
                                        UseHeaderRow = true
                                    }
                                });
                                dataTable = result.Tables[0];
                            }

                        }

                    }

                    //  reader.Close();


                    DataTable dts = new DataTable();
                    // dts.Columns.Add("SNO");
                    dts.Columns.Add("ITEMCODE");
                    dts.Columns.Add("ITEMNAME");
                    dts.Columns.Add("UOM");
                    dts.Columns.Add("QUANTITY");
                    dts.Columns.Add("SPECS");
                    dts.Columns.Add("PROJECT");
                    string colnames = string.Empty;
                    string ColumnData = string.Empty;

                    for (var j = 6; j < dataTable.Rows.Count; j++)
                    {
                        if (dataTable.Rows[j][1].ToString() != "")
                        {
                            DataRow dr = dts.NewRow();
                            // var theUrl = dataTable.Rows[j][2].ToString();
                            //dr["SNO"] = dataTable.Rows[j][2].ToString();
                            dr["ITEMCODE"] = dataTable.Rows[j][1].ToString();
                            dr["ITEMNAME"] = dataTable.Rows[j][4].ToString();
                            dr["UOM"] = dataTable.Rows[j][7].ToString();
                            dr["QUANTITY"] = dataTable.Rows[j][8].ToString();
                            dr["SPECS"] = dataTable.Rows[j][5].ToString();
                            dr["PROJECT"] = dataTable.Rows[j][12].ToString();



                            SRNDetailEntity det = new SRNDetailEntity();
                            det.ITEMCODE = dataTable.Rows[j][1].ToString();
                            det.ITEMNAME = dataTable.Rows[j][4].ToString();
                            det.UOM = dataTable.Rows[j][7].ToString();
                            det.QUANTITY = dataTable.Rows[j][8].ToString();
                            det.SPECS = dataTable.Rows[j][5].ToString();
                            det.PROJECT = dataTable.Rows[j][12].ToString();
                            //  request.requestSRNEntrydetails.Add(det);
                            listSRNItemdet.Add(det);
                            dts.Rows.Add(dr);
                            listSRNItemInsertdet = (from inv in listSRNItemdet.AsEnumerable()
                                                    select new SRNItemDetails
                                                    {

                                                        ItemCode = inv.ITEMCODE,
                                                        ItemName = inv.ITEMNAME,
                                                        Quantity = inv.QUANTITY,
                                                        //UOM = inv.UOM.Split('+')[0],
                                                        UOM = inv.UOM,
                                                        Specs = inv.SPECS,
                                                        Project = inv.PROJECT,
                                                    }).ToList();

                        }

                    }

                    reader.Close();

                    results = "True" + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(dts);




                }
                catch (Exception ex)
                {
                    results = "False" + "|" + ex.Message.ToString();
                    return Json(results);
                }
            }
            else
            {
                results = "False" + "|" + "Please Choose File to Upload. ";
                return Json(results);
            }
            return Json(results);

        }
        public ActionResult InsertSRNUpload()
        {
            List<SRNItemDetails> listSRNItemInsertdet = new List<SRNItemDetails>();
            //List<SRNItemDetails> listSRNItemInsertdet = new List<SRNItemDetails>();
            string results = "";
            string data = "";
            IExcelDataReader reader = null;
            DataTable dataTable = null;
            if (Request.Files.Count > 0)
            {
                try
                {
                    HttpFileCollectionBase files = Request.Files;
                    string filePath = string.Empty;
                    string path = Server.MapPath("~/Uploads/");
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }
                    var postedFile = System.Web.HttpContext.Current.Request.Files["CsvDoc"];
                    filePath = path + Path.GetFileName(postedFile.FileName);
                    string extension = Path.GetExtension(postedFile.FileName);
                    postedFile.SaveAs(filePath);
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if (file.FileName == postedFile.FileName)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                Stream stream = file.InputStream;

                                if (file.FileName.EndsWith(".xls"))
                                {
                                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                                }
                                else if (file.FileName.EndsWith(".xlsx"))
                                {
                                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                                }
                                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                                {
                                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                                    {
                                        UseHeaderRow = true
                                    }
                                });
                                dataTable = result.Tables[0];
                            }

                        }

                    }

                    //  reader.Close();
                    DataTable dts = new DataTable();
                    RequestSRNEntry request = new RequestSRNEntry();
                    ResponseSRNEntry response = new ResponseSRNEntry();
                    request.ReqSRNEntry = new SRNEntryEntity();
                    request.requestSRNEntrydetails = new List<SRNDetailEntity>();
                    request.ReqSRNEntry.SRNNO = Request.Form["SRNNO"];
                    request.ReqSRNEntry.SRNDATE = dataTable.Rows[2][3].ToString();
                    request.ReqSRNEntry.REMARKS = dataTable.Rows[3][8].ToString();
                    request.ReqSRNEntry.USERCODE = Session["LoginEmployeeCode"].ToString();
                    for (var j = 6; j < dataTable.Rows.Count; j++)
                    {
                        if (!dataTable.Rows[j][1].ToString().Equals(""))
                        {

                            SRNDetailEntity det = new SRNDetailEntity();
                            det.ITEMCODE = dataTable.Rows[j][1].ToString();
                            det.ITEMNAME = dataTable.Rows[j][4].ToString();
                            det.UOM = dataTable.Rows[j][7].ToString();
                            det.QUANTITY = dataTable.Rows[j][8].ToString();
                            det.SPECS = dataTable.Rows[j][5].ToString();
                            det.PROJECT = dataTable.Rows[j][12].ToString();
                            request.requestSRNEntrydetails.Add(det);


                        }


                    }
                    SRNEntryBC bc = new SRNEntryBC();
                    string value = "Update";
                    response = bc.SRNInsertBC(request);
                    ManageError Err = new ManageError();

                    string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
                    resultjson = response.result + "|" + resultjson;

                    return Json(resultjson);

                }
                catch (Exception ex)
                {
                    results = "False" + "|" + ex.Message.ToString();
                    return Json(results);
                }
            }
            else
            {
                results = "False" + "|" + "Please Choose File to Upload. ";
                return Json(results);
            }
            return Json(results);
        }

        #endregion

        #region RemixQuality ............................................................................
        public ActionResult RemixQuality()
        {
            return View();
        }
        public ActionResult GetRemixQualityPageLoad()
        {
            RequestRemixQuality request = new RequestRemixQuality();
            ResponseRemixQuality response = new ResponseRemixQuality();
            RemixQualityBC bc = new RemixQualityBC();
            response = bc.FetchRemixQualityPageLoadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_RemixQualitydetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        public ActionResult RemixQualityPrintDetails(string LOTNO, string LOTSERIALNO)
        {


            RequestRemixQuality request = new RequestRemixQuality();
            ResponseRemixQuality response = new ResponseRemixQuality();
            request.requestRemixQuality = new RemixQualityEntity();
            request.requestRemixQuality.LOTNO = LOTNO;
            request.requestRemixQuality.LOTSERIALNO = LOTSERIALNO;
            RemixQualityBC bc = new RemixQualityBC(); ;
            response = bc.RemixQualityPrintBC(request);




            StringBuilder stringBuilder = new StringBuilder();


            StreamReader streamReader = new StreamReader(REMIXLABEL);
            string str_ = streamReader.ReadToEnd();
            string str_2 = str_;
            str_2 = str_2.Replace("$ITEMCODE$", response.JS_RemixQualitydetails.Rows[0]["ITEMCODE"].ToString());

            str_2 = str_2.Replace("$ITEMNAME$", response.JS_RemixQualitydetails.Rows[0]["ITEMNAME"].ToString());
            str_2 = str_2.Replace("$LOTNO$", response.JS_RemixQualitydetails.Rows[0]["LOTNO"].ToString());
            str_2 = str_2.Replace("$WEIGHT$", response.JS_RemixQualitydetails.Rows[0]["NETWEIGHT"].ToString());
            str_2 = str_2.Replace("$DATE$", response.JS_RemixQualitydetails.Rows[0]["MAKEDATE"].ToString());
            str_2 = str_2.Replace("$EXPDATE$", response.JS_RemixQualitydetails.Rows[0]["EXPIREDATE"].ToString());
            str_2 = str_2.Replace("$LABELSEQ$", response.JS_RemixQualitydetails.Rows[0]["LOTSERIALNO"].ToString());
            stringBuilder.Append(str_2);




            var data = response.result + "|" + stringBuilder + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_RemixQualitypageload);
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }



        #endregion

        #region.................... Dispatch Plan

        public ActionResult DispatchPlan()
        {
            return View();
        }

        public ActionResult DispatchPlanPageLoad()
        {
            listDispatchPlanItemdet = new List<DisaptchPlanDetailEntity>();

            RequestDispatchplanEntry request = new RequestDispatchplanEntry();
            ResponseDispatchplanEntry response = new ResponseDispatchplanEntry();
            DispatchPlanBC bc = new DispatchPlanBC();
            response = bc.PageloadDispatchplanBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Customerdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.DispatchPlanDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }



        public ActionResult DPNItemnameFetch(string ITEMCODE)
        {
            RequestDispatchplanEntry request = new RequestDispatchplanEntry();
            ResponseDispatchplanEntry response = new ResponseDispatchplanEntry();
            request.ReqDispatchPlanEntry = new DispatchPlanEntryEntity();
            request.ReqDispatchPlanEntry.ITEMCODE = ITEMCODE;
            DispatchPlanBC bc = new DispatchPlanBC();
            response = bc.DPNItemnameFetchBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }











        public class DispatchItemDetails
        {
            public string ItemCode { get; set; }
            public string ItemName { get; set; }
            public string Quantity { get; set; }

            public string Remove { get; set; }

        }

        static List<DisaptchPlanDetailEntity> listDispatchPlanItemdet = new List<DisaptchPlanDetailEntity>();

        public ActionResult AddDSPItemDetails()
        {
            List<DispatchItemDetails> listDispatchItemInsertdet = new List<DispatchItemDetails>();


            if (Request.Form["action"].ToString() == "Update")
            {
                for (int i = listDispatchPlanItemdet.Count - 1; i >= 0; i--)
                {
                    if (listDispatchPlanItemdet[i].ITEMCODE == Request.Form["ITEMCODE"])
                    {
                        listDispatchPlanItemdet.RemoveAt(i);
                    }
                }

            }

            int duplicatecount = listDispatchPlanItemdet.Where(inventorylist => inventorylist.ITEMCODE == Request.Form["ITEMCODE"].ToString()).Count();

            string data = "";
            if (duplicatecount == 0)
            {
                DisaptchPlanDetailEntity Itemdts = new DisaptchPlanDetailEntity();

                Itemdts.ITEMCODE = Request.Form["ITEMCODE"];
                Itemdts.ITEMNAME = Request.Form["ITEMNAME"];
                Itemdts.QUANTITY = Request.Form["QTY"];
                listDispatchPlanItemdet.Add(Itemdts);


                listDispatchItemInsertdet = (from inv in listDispatchPlanItemdet.AsEnumerable()
                                             select new DispatchItemDetails
                                             {

                                                 ItemCode = inv.ITEMCODE,
                                                 ItemName = inv.ITEMNAME,
                                                 Quantity = inv.QUANTITY,

                                             }).ToList();
                data = "true" + "|" + JsonConvert.SerializeObject(listDispatchItemInsertdet);

            }
            else
            {
                data = "false" + "|" + JsonConvert.SerializeObject("Item Code " + Request.Form["ITEMCODE"].ToString() + " Already Exist.");
            }
            //TempData["InventoryInsert"] = listInventorydet;
            return Json(data, JsonRequestBehavior.AllowGet);
        }



        public ActionResult DPNDeleteRow(string Code)
        {

            listDispatchPlanItemdet.Remove(listDispatchPlanItemdet.Single(r => r.ITEMCODE == Code));

            List<DispatchItemDetails> listDispatchPlanItemInsertdet = new List<DispatchItemDetails>();

            listDispatchPlanItemInsertdet = (from inv in listDispatchPlanItemdet.AsEnumerable()
                                             select new DispatchItemDetails
                                             {

                                                 ItemCode = inv.ITEMCODE,
                                                 ItemName = inv.ITEMNAME,
                                                 Quantity = inv.QUANTITY,



                                             }).ToList();


            return Json(JsonConvert.SerializeObject(listDispatchPlanItemInsertdet), JsonRequestBehavior.AllowGet);

        }

        public ActionResult InsertDispatchPlanDetails()
        {

            RequestDispatchplanEntry request = new RequestDispatchplanEntry();
            ResponseDispatchplanEntry response = new ResponseDispatchplanEntry();
            request.ReqDispatchPlanEntry = new DispatchPlanEntryEntity();
            request.requestDispatchPlanEntrydetails = listDispatchPlanItemdet;
            request.ReqDispatchPlanEntry.DISPATCHNO = Request.Form["DPNO"];
            if (Request.Form["DPDATE"] != "")
            {
                string date = Request.Form["DPDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.ReqDispatchPlanEntry.DISPATCHDATE = ResultedDate.ToString();

            }
            else
            {
                request.ReqDispatchPlanEntry.DISPATCHDATE = "";
            }

            request.ReqDispatchPlanEntry.CUSTOMER = Request.Form["CUSTOMER"];
            request.ReqDispatchPlanEntry.USERCODE = Session["LoginEmployeeCode"].ToString();
            request.ReqDispatchPlanEntry.REFERENCENO = Request.Form["REFERENCENO"];
            request.ReqDispatchPlanEntry.REMARKS = Request.Form["REMARKS"];



            DispatchPlanBC bc = new DispatchPlanBC();
            string value = "Update";

            if (value != Request.Form["actiontype"].ToString())
            {
                response = bc.DispatchPlanInsertBC(request);
            }
            else
            {

                response = bc.DispatchPlanUpdateBC(request);
            }


            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["DPNINSERT"] = null;
                listDispatchPlanItemdet = new List<DisaptchPlanDetailEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }

        public ActionResult ClearDPNDetails()
        {

            listDispatchPlanItemdet = new List<DisaptchPlanDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }


        public ActionResult DPNEditDts(string DPNO)
        {
            RequestDispatchplanEntry request = new RequestDispatchplanEntry();
            ResponseDispatchplanEntry response = new ResponseDispatchplanEntry();
            request.ReqDispatchPlanEntry = new DispatchPlanEntryEntity();
            request.ReqDispatchPlanEntry.DISPATCHNO = DPNO;
            DispatchPlanBC bc = new DispatchPlanBC();
            response = bc.DPNEditDtsBC(request);

            for (int i = 0; i < response.DispatchPlanDetails.Rows.Count; i++)
            {
                DisaptchPlanDetailEntity DPNEdit = new DisaptchPlanDetailEntity();

                DPNEdit.ITEMCODE = response.DispatchPlanDetails.Rows[i]["ItemCode"].ToString();
                DPNEdit.ITEMNAME = response.DispatchPlanDetails.Rows[i]["ItemName"].ToString();
                DPNEdit.QUANTITY = response.DispatchPlanDetails.Rows[i]["Quantity"].ToString();

                listDispatchPlanItemdet.Add(DPNEdit);
            }
            TempData["DPNINSERT"] = listDispatchPlanItemdet;

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.DispatchPlanHeader) + "|" +
                       Utility.DataTableToJSONWithJavaScriptSerializer(response.DispatchPlanDetails);

            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }





        public ActionResult DPNViewDts(string DPNNO)
        {
            RequestDispatchplanEntry request = new RequestDispatchplanEntry();
            ResponseDispatchplanEntry response = new ResponseDispatchplanEntry();
            request.ReqDispatchPlanEntry = new DispatchPlanEntryEntity();
            request.ReqDispatchPlanEntry.DISPATCHNO = DPNNO;
            DispatchPlanBC bc = new DispatchPlanBC();
            response = bc.DPNViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.DispatchPlanDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }











        #endregion

        #region QCEntry ............................................................................
        public ActionResult QCEntry()
        {
            return View();
        }

        public ActionResult GetQCEntryPageLoad()
        {
            RequestQCEntry request = new RequestQCEntry();
            ResponseQCEntry response = new ResponseQCEntry();
            QCEntryBC bc = new QCEntryBC();
            response = bc.FetchQCEntryPageLoadBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_QCEntrydetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        public ActionResult InsertQCEntry(string PRNNO, string PARTNAME, string CUSTOMER, string MODEL, string VARIANT, string LOTNO, string QUANTITY, string REJECTEDQUANTITY, string REMARKS, string LOTSTATUS)
        {

            string[] PRNNOARR = PRNNO.Split('^');
            string[] PARTNAMEARR = PARTNAME.Split('^');
            string[] CUSTOMERARR = CUSTOMER.Split('^');
            string[] MODELARR = MODEL.Split('^');
            string[] VARIANTARR = VARIANT.Split('^');
            string[] LOTNOARR = LOTNO.Split('^');
            string[] QUANTITYARR = QUANTITY.Split('^');


            RequestQCEntry request = new RequestQCEntry();
            ResponseQCEntry response = new ResponseQCEntry();

            request.requestQCEntry = new QCEntryEntity();

            request.requestqcentrydetails = new List<QCEntryDetailEntity>();
            for (int i = 0; i < PRNNOARR.Length; i++)
            {
                if (PRNNOARR[i] != "")
                {
                    QCEntryDetailEntity det = new QCEntryDetailEntity();

                    det.PRNNO = PRNNOARR[i];
                    det.PARTNAME = PARTNAMEARR[i];
                    det.CUSTOMER = CUSTOMERARR[i];
                    det.MODEL = MODELARR[i];
                    det.VARIANT = VARIANTARR[i];
                    det.REJECTEDQUANTITY = REJECTEDQUANTITY;
                    det.LOTNO = LOTNOARR[i];
                    det.QUANTITY = QUANTITYARR[i];
                    det.REMARKS = REMARKS;
                    det.LOTSTATUS = LOTSTATUS;

                    request.requestqcentrydetails.Add(det);



                }
            }

            QCEntryBC bc = new QCEntryBC();

            response = bc.InsertQCEntryBC(request);

            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;

            JsonResult json = Json(resultjson, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;




            //RequestQCEntry request = new RequestQCEntry();
            //ResponseQCEntry response = new ResponseQCEntry();
            //request.requestQCEntry = new QCEntryEntity();
            //request.requestQCEntry.PRNNO = PRNNO;
            //request.requestQCEntry.PARTNAME = PARTNAME;
            //request.requestQCEntry.CUSTOMER = CUSTOMER;
            //request.requestQCEntry.MODEL = MODEL;
            //request.requestQCEntry.VARIANT = VARIANT;
            //request.requestQCEntry.LOTNO = LOTNO;
            //request.requestQCEntry.TYPE = TYPE;
            //request.requestQCEntry.QUANTITY = QUANTITY;
            //request.requestQCEntry.REJECTEDQUANTITY = REJECTEDQUANTITY;
            //request.requestQCEntry.REMARKS = REMARKS;
            //request.requestQCEntry.LOTSTATUS = LOTSTATUS;

            //QCEntryBC bc = new QCEntryBC();

            //response = bc.InsertQCEntryBC(request);

            //ManageError Err = new ManageError();

            //string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            //resultjson = response.result + "|" + resultjson;

            //JsonResult json = Json(resultjson, JsonRequestBehavior.AllowGet);
            //json.MaxJsonLength = int.MaxValue;
            //return json;
        }


        #endregion

        #region REInspection ............................................................................
        public ActionResult REInspection()
        {
            return View();
        }




        #endregion

        #region StockAdjustment ............................................................................
        public ActionResult StockAdjustment()
        {
            return View();
        }

        public ActionResult GetStaockAdjustPageLoad()
        {
            RequestStockAdjustment request = new RequestStockAdjustment();
            ResponseStockAdjustment response = new ResponseStockAdjustment();
            StockAdjustmentBC bc = new StockAdjustmentBC();
            response = bc.FetchStockAdjustBC();
            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_ItemDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult FetchDetailsByItemCode(string ITEMCODE)
        {
            RequestStockAdjustment request = new RequestStockAdjustment();
            ResponseStockAdjustment response = new ResponseStockAdjustment();
            request.Reqstockadjustment = new StockAdjustmentEntity();
            request.Reqstockadjustment.ITEMCODE = ITEMCODE;
            StockAdjustmentBC bc = new StockAdjustmentBC();
            response = bc.FetchItemDetailsbyItemcodeBC(request);

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_LotDetails);
            return Json(data, JsonRequestBehavior.AllowGet);
        }


        public ActionResult InsertStaockAdjust(string ITEMCODE, string ITEMNAME, string LOTNO, string BARCODE, string QUANTITY, string ADJUSTQUANTITY)
        {

            string[] ITEMCODEARR = ITEMCODE.Split('^');
            string[] ITEMNAMEARR = ITEMNAME.Split('^');

            string[] LOTNOARR = LOTNO.Split('^');
            string[] BARCODEARR = BARCODE.Split('^');
            string[] QUANTITYARR = QUANTITY.Split('^');

            string[] ADJUSTQUANTITYARR = ADJUSTQUANTITY.Split('^');

            RequestStockAdjustment request = new RequestStockAdjustment();
            ResponseStockAdjustment response = new ResponseStockAdjustment();

            request.Reqstockadjustment = new StockAdjustmentEntity();

            request.requeststockadjustdetails = new List<StockAdjustmentDetailEntity>();
            for (int i = 0; i < ITEMCODEARR.Length; i++)
            {
                if (ITEMCODEARR[i] != "")
                {
                    StockAdjustmentDetailEntity det = new StockAdjustmentDetailEntity();
                    det.ITEMCODE = ITEMCODEARR[i];
                    det.ITEMNAME = ITEMNAMEARR[i];
                    det.LOTNO = LOTNOARR[i];
                    det.BARCODE = BARCODEARR[i];
                    det.QUANTITY = QUANTITYARR[i];
                    det.ADJUSTQUANTITY = ADJUSTQUANTITYARR[i];
                    request.requeststockadjustdetails.Add(det);

                }
            }

            StockAdjustmentBC bc = new StockAdjustmentBC();
            response = bc.InsertStockAdjustBC(request);

            ManageError Err = new ManageError();
            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;

            JsonResult json = Json(resultjson, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        #endregion


        #region Invoice Creation ............................................................................
        public ActionResult InvoiceCreation()
        {
            return View();
        }

        public ActionResult InvoicePageLoad()
        {
            listInvoiceItemdet = new List<InvoiceCreationDetailEntity>();

            RequestInvoiceCreation request = new RequestInvoiceCreation();
            ResponseInvoiceCreation response = new ResponseInvoiceCreation();
            InvoiceCreationBC bc = new InvoiceCreationBC();
            response = bc.PageloadInvoiceBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Supplierdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.InvoiceDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult InvoiceItemnameFetch(string ITEMCODE)
        {
            RequestInvoiceCreation request = new RequestInvoiceCreation();
            ResponseInvoiceCreation response = new ResponseInvoiceCreation();
            request.ReqINVOICEEntry = new InvoiceCreationEntity();
            request.ReqINVOICEEntry.ITEMCODE = ITEMCODE;
            InvoiceCreationBC bc = new InvoiceCreationBC();
            response = bc.INVOICEItemnameFetchBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Itemdetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public class InvoiceItemDetails
        {
            public string ItemCode { get; set; }
            public string ItemName { get; set; }
            public string Quantity { get; set; }
            public string Remove { get; set; }
            public string Edit { get; set; }

        }

        static List<InvoiceCreationDetailEntity> listInvoiceItemdet = new List<InvoiceCreationDetailEntity>();

        public ActionResult AddINVOICEItemDetails()
        {
            List<InvoiceItemDetails> listInvoiceItemInsertdet = new List<InvoiceItemDetails>();

            if (Request.Form["action"].ToString() == "Update")
            {
                //for (int i = listGRNItemdet.Count - 1; i >= 0; i--)
                for (int i = 0; i < listInvoiceItemdet.Count; i++)
                {
                    if (listInvoiceItemdet[i].ITEMCODE == Request.Form["ITEMCODE"])
                    {
                        listInvoiceItemdet.RemoveAt(i);
                    }
                }
                // GRNDeleteRowEdit(Request.Form["ITEMCODE"], Request.Form["LOTNO"], Request.Form["NETWEIGHT"]);
            }

            int duplicatecount = listInvoiceItemdet.Where(inventorylist => inventorylist.ITEMCODE == Request.Form["ITEMCODE"].ToString()).Count();

            string data = "";
            if (duplicatecount == 0)
            {
                InvoiceCreationDetailEntity Itemdts = new InvoiceCreationDetailEntity();

                Itemdts.ITEMCODE = Request.Form["ITEMCODE"];
                Itemdts.ITEMNAME = Request.Form["ITEMNAME"];
                Itemdts.QUANTITY = Request.Form["QTY"];
                listInvoiceItemdet.Add(Itemdts);

                listInvoiceItemInsertdet = (from inv in listInvoiceItemdet.AsEnumerable()
                                            select new InvoiceItemDetails
                                            {

                                                ItemCode = inv.ITEMCODE,
                                                ItemName = inv.ITEMNAME,
                                                Quantity = inv.QUANTITY

                                            }).ToList();
                data = "true" + "|" + JsonConvert.SerializeObject(listInvoiceItemInsertdet);

            }
            else
            {
                data = "false" + "|" + JsonConvert.SerializeObject("Item Code " + Request.Form["ITEMCODE"].ToString() + " Already Exist.");
            }
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult INVOICEDeleteRow(string Code)
        {

            listInvoiceItemdet.Remove(listInvoiceItemdet.FirstOrDefault(r => r.ITEMCODE == Code));

            List<InvoiceItemDetails> listInvoiceItemInsertdet = new List<InvoiceItemDetails>();

            listInvoiceItemInsertdet = (from inv in listInvoiceItemdet.AsEnumerable()
                                        select new InvoiceItemDetails
                                        {

                                            ItemCode = inv.ITEMCODE,
                                            ItemName = inv.ITEMNAME,
                                            Quantity = inv.QUANTITY,

                                        }).ToList();


            return Json(JsonConvert.SerializeObject(listInvoiceItemInsertdet), JsonRequestBehavior.AllowGet);

        }

        public ActionResult INVOICEDeleteRowEdit(string Code)
        {

            listInvoiceItemdet.Remove(listInvoiceItemdet.FirstOrDefault(r => r.ITEMCODE == Code));

            List<InvoiceItemDetails> listInvoiceItemInsertdet = new List<InvoiceItemDetails>();

            listInvoiceItemInsertdet = (from inv in listInvoiceItemdet.AsEnumerable()
                                        select new InvoiceItemDetails
                                        {

                                            ItemCode = inv.ITEMCODE,
                                            ItemName = inv.ITEMNAME,
                                            Quantity = inv.QUANTITY,

                                        }).ToList();

            string data = "true" + "|" + JsonConvert.SerializeObject(listInvoiceItemInsertdet);
            return Json(data, JsonRequestBehavior.AllowGet);
            // return Json(JsonConvert.SerializeObject(listGRNEntryInsertdet), JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public ActionResult InsertInvoiceDetails()
        {

            RequestInvoiceCreation request = new RequestInvoiceCreation();
            ResponseInvoiceCreation response = new ResponseInvoiceCreation();
            request.ReqINVOICEEntry = new InvoiceCreationEntity();
            request.requestINVOICEdetails = listInvoiceItemdet;
            request.ReqINVOICEEntry.INVOICENO = Request.Form["INVOICENO"];
            if (Request.Form["INVOICEDATE"] != "")
            {
                string date = Request.Form["INVOICEDATE"];

                string[] Revision_mmddyyyy = null;

                if (date.Contains("-"))
                    Revision_mmddyyyy = date.Split('-');
                else if (date.Contains("/"))
                    Revision_mmddyyyy = date.Split('/');
                else if (date.Contains("."))
                    Revision_mmddyyyy = date.Split('.');

                int dd = Convert.ToInt32(Revision_mmddyyyy[0]);
                int MM = Convert.ToInt32(Revision_mmddyyyy[1]);
                int yyyy = Convert.ToInt32(Revision_mmddyyyy[2]);

                string[] monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames;
                string DateString = dd + monthNames[MM - 1] + yyyy;

                string SystemDateFormate = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;
                string InputDate = Convert.ToDateTime(DateString).ToString(SystemDateFormate);
                DateTime ResultedDate = DateTime.Parse(InputDate);
                request.ReqINVOICEEntry.INVOICEDATE = ResultedDate.ToString();

            }
            else
            {
                request.ReqINVOICEEntry.INVOICEDATE = "";
            }

            request.ReqINVOICEEntry.SUPPLIER = Request.Form["SUPPLIER"];
            request.ReqINVOICEEntry.USERCODE = Session["LoginEmployeeCode"].ToString();
            request.ReqINVOICEEntry.REFERENCENO = Request.Form["REFERENCENO"];
            request.ReqINVOICEEntry.REMARKS = Request.Form["REMARKS"];


            InvoiceCreationBC bc = new InvoiceCreationBC();
            string value = "Update";

            if (value != Request.Form["actiontype"].ToString())
            {
                response = bc.INVOICEInsertBC(request);
            }
            else
            {

                response = bc.INVOICEUpdateBC(request);
            }


            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["INVOICEINSERT"] = null;
                listGRNItemdet = new List<GRNDetailEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }

        public ActionResult INVOICEViewDts(string INVOICENO)
        {
            RequestInvoiceCreation request = new RequestInvoiceCreation();
            ResponseInvoiceCreation response = new ResponseInvoiceCreation();
            request.ReqINVOICEEntry = new InvoiceCreationEntity();
            request.ReqINVOICEEntry.INVOICENO = INVOICENO;
            InvoiceCreationBC bc = new InvoiceCreationBC();
            response = bc.INVOICEViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.InvoiceDetails);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult INVOICEEditDts(string INVOICENO)
        {
            RequestInvoiceCreation request = new RequestInvoiceCreation();
            ResponseInvoiceCreation response = new ResponseInvoiceCreation();
            request.ReqINVOICEEntry = new InvoiceCreationEntity();
            request.ReqINVOICEEntry.INVOICENO = INVOICENO;
            InvoiceCreationBC bc = new InvoiceCreationBC();
            response = bc.INVOICEEditDtsBC(request);

            for (int i = 0; i < response.InvoiceDetails.Rows.Count; i++)
            {
                InvoiceCreationDetailEntity INVOICEEdit = new InvoiceCreationDetailEntity();

                INVOICEEdit.ITEMCODE = response.InvoiceDetails.Rows[i]["ItemCode"].ToString();
                INVOICEEdit.ITEMNAME = response.InvoiceDetails.Rows[i]["ItemName"].ToString();
                INVOICEEdit.QUANTITY = response.InvoiceDetails.Rows[i]["Quantity"].ToString();
                listInvoiceItemdet.Add(INVOICEEdit);
            }
            TempData["InvoiceINSERT"] = listInvoiceItemdet;

            var data = Utility.DataTableToJSONWithJavaScriptSerializer(response.InvoiceHeader) + "|" +
                       Utility.DataTableToJSONWithJavaScriptSerializer(response.InvoiceDetails);

            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult ClearINVOICEDetails()
        {

            listInvoiceItemdet = new List<InvoiceCreationDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }
        public ActionResult Downloads(string file)
        {
            string filename = Path.GetFileName(file);
            string fullPath = Path.Combine(Server.MapPath("~/Downloads"), filename);


            return File(fullPath, "application/octet-stream", filename);


        }
        public ActionResult InvoiceCreationUploads(string Invoiceno)
        {
            string results = "";

            DataTable dataTable = new DataTable();
            if (Request.Files.Count > 0)
            {
                try
                {

                    HttpFileCollectionBase files = Request.Files;

                    var postedFile = System.Web.HttpContext.Current.Request.Files["CsvDoc"];

                    string path = Path.GetFileName(postedFile.FileName);

                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if (file.FileName == postedFile.FileName)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                Stream stream = file.InputStream;
                                IExcelDataReader reader = null;
                                if (file.FileName.EndsWith(".xls"))
                                {
                                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                                }
                                else if (file.FileName.EndsWith(".xlsx"))
                                {
                                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                                }
                                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                                {
                                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                                    {
                                        UseHeaderRow = true
                                    }
                                });
                                dataTable = result.Tables[0];

                                reader.Close();

                                results = Utility.DataTableToJSONWithJavaScriptSerializer(dataTable);

                                if (dataTable.Rows.Count > 0)
                                {

                                    DataTable dt = new DataTable();

                                    string check = string.Empty;

                                    int rowcount = 0;
                                    int rowcount1 = 0;
                                    string employeecodes = "";
                                    try
                                    {
                                        using (TransactionScope scope = new TransactionScope())
                                        {
                                            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["SANGSINBREAK"].ConnectionString);
                                            {
                                                using (DataSet ds = new DataSet())
                                                {
                                                    foreach (DataRow req in dataTable.Rows)
                                                    {
                                                        SqlCommand cmd = new SqlCommand("[TRANSACTIONS].[INVOICE_DETAILSINSERT]", con);
                                                        cmd.CommandType = CommandType.StoredProcedure;

                                                        cmd.Parameters.AddWithValue("@INVOICENO", Invoiceno);
                                                        cmd.Parameters.AddWithValue("@ITEMCODE", string.IsNullOrEmpty(req["ItemCode"].ToString()) ? string.Empty : req["ItemCode"].ToString());
                                                        cmd.Parameters.AddWithValue("@ITEMNAME", string.IsNullOrEmpty(req["ItemName"].ToString()) ? string.Empty : req["ItemName"].ToString());
                                                        cmd.Parameters.AddWithValue("@QUANTITY", string.IsNullOrEmpty(req["Quantity"].ToString()) ? string.Empty : req["Quantity"].ToString());

                                                        SqlDataAdapter da = new SqlDataAdapter(cmd);
                                                        //DataSet ds2 = new DataSet();
                                                        da.Fill(ds);

                                                        rowcount++;

                                                    }

                                                    if (dataTable.Rows.Count == rowcount)
                                                    {
                                                        results = "Successfully uploaded!!!";
                                                        scope.Complete();
                                                        results = "true";

                                                    }
                                                    else
                                                    {
                                                        results = "Already uploaded";
                                                    }


                                                }


                                            }


                                        }


                                    }
                                    catch (Exception ex)
                                    {
                                        string responsetime = DateTime.Now.ToString("yyyy MM dd hh:mm:ss.fff tt");
                                        string responselog = "";
                                        results = "false";

                                    }


                                }
                                else
                                {
                                    results = "false" + "|" + "Uploaded Excel File is Empty. ";
                                }

                            }
                        }
                        else
                        {
                            results = "False" + "|" + "Uploaded InValid Excel File. ";
                        }

                    }


                }

                catch (Exception ex)
                {

                    results = "False" + "|" + "Error occurred. Error details: ";

                }
            }

            string results1 = JsonConvert.SerializeObject(dataTable)
                              + "|" + results;
            JsonResult json = Json(results1, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        #endregion

        #region InvoicePrint ............................................................................
        public ActionResult InvoicePrint()
        {
            TempData["invoicedetails"] = null;
            return View();
        }

        public ActionResult InvoicePrintViewDts(string INVOICENO, string ITEMCODE)
        {
            RequestInvoicePrint request = new RequestInvoicePrint();
            ResponseInvoicePrint response = new ResponseInvoicePrint();
            request.ReqInvoicePrint = new InvoicePrintEntity();
            request.ReqInvoicePrint.INVOICENO = INVOICENO;
            request.ReqInvoicePrint.ITEMCODE = ITEMCODE;
            InvoicePrintBC bc = new InvoicePrintBC();
            response = bc.InvoiceViewDtsBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Invoiceno);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult GetInvoicePageLoad()
        {
            InvoiceLabelPrintdet = new List<InvoicePrintDetailEntity>();

            RequestInvoicePrint request = new RequestInvoicePrint();
            ResponseInvoicePrint response = new ResponseInvoicePrint();
            InvoicePrintBC bc = new InvoicePrintBC();
            response = bc.PageloadGetInvoiceBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Invoiceno)
                                    + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Quantity);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult GetItemNamebyInvoice(string INVOICENO)
        {
            RequestInvoicePrint request = new RequestInvoicePrint();
            ResponseInvoicePrint response = new ResponseInvoicePrint();
            request.ReqInvoicePrint = new InvoicePrintEntity();
            request.ReqInvoicePrint.INVOICENO = INVOICENO;
            InvoicePrintBC bc = new InvoicePrintBC();
            response = bc.PageloadGetItemNameBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_ITEMNAME);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public ActionResult GetQuantitybyItemName(string INVOICENO, string ITEMCODE)
        {
            RequestInvoicePrint request = new RequestInvoicePrint();
            ResponseInvoicePrint response = new ResponseInvoicePrint();
            request.ReqInvoicePrint = new InvoicePrintEntity();
            request.ReqInvoicePrint.ITEMCODE = ITEMCODE;
            request.ReqInvoicePrint.INVOICENO = INVOICENO;

            InvoicePrintBC bc = new InvoicePrintBC();
            response = bc.PageloadGetQuantityBC(request);

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Quantity)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_BarcodeList)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_RejectedQty)
                         + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_ItemType);

            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }


        public ActionResult InsertPOLabelPrint(string actiontype, string ITEMCODE, string ITEMNAME, string UOM, string BARCODE)
        {
            string strdata = "";
            try
            {
                RequestInvoicePrint request = new RequestInvoicePrint();
                ResponseInvoicePrint response = new ResponseInvoicePrint();
                request.requestInvoicePrintdetails = new List<InvoicePrintEntity>();

                string[] SELECTARR = Request.Form["select"].Split('^');
                // string[] INVOICENOARR = INVOICENO.Split('^');        
                string[] ITEMCODEARR = ITEMCODE.Split('^');
                string[] ITEMNAMEARR = ITEMNAME.Split('^');
                string[] UOMARR = UOM.Split('^');
                string[] BARCODEARR = BARCODE.Split('^');
                string strbarcode = "";
                StringBuilder stringBuilder = new StringBuilder();
                for (int i = 0; i < SELECTARR.Length; i++)
                {
                    InvoicePrintEntity ua = new InvoicePrintEntity();
                    ua.SELECT = SELECTARR[i];
                    // ua.INVOICENO = INVOICENOARR[i];     
                    ua.ITEMCODE = ITEMCODEARR[i];
                    ua.ITEMNAME = ITEMNAMEARR[i];
                    ua.UOM = UOMARR[i];
                    string barcode = BARCODEARR[i];
                    ua.BARCODE = barcode;
                    strbarcode += barcode + "^";
                    request.requestInvoicePrintdetails.Add(ua);
                    //String test = @"<div style='page-break-after:always'><table style='width: 375px; margin-top:10px; margin-left:25px;'><tr><td text-align='left' style='width: 375px'><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial'>Item: $ITEMCODE$</p><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial; font-stretch: condensed'>Name: $ITEMNAME$</p>";
                    // String test = @"<svg style='margin-top:2px;margin-left:30px;margin-right:0px;height:130px;width:300px;' id='$qrcode$'></svg><div><span style='font-weight: 900;font-size: 12px;margin-left:10px;'>PURCHASEORDER No</span><span> : </span><span style='font-size: 12px;'>$PURCHASEORDERNO$</span></div><div><span style='font-weight: 900;font-size: 12px;margin-left:10px;'>ITEMCODE</span><span> : </span><span style='font-size: 12px;'>$ITEMCODE$</span></div>";
                    // byte[] byteArray = Encoding.ASCII.GetBytes(test);
                    // MemoryStream stream = new MemoryStream(byteArray);
                    //StreamReader streamReader = new StreamReader(stream);
                    StreamReader streamReader = new StreamReader(POBARCODELABEL);
                    string str_ = streamReader.ReadToEnd();
                    string str_2 = str_;
                    // str_2 = str_2.Replace("$INVOICENO$", INVOICENOARR[i]);
                    str_2 = str_2.Replace("$ITEMNAME$", ITEMNAMEARR[i]);
                    str_2 = str_2.Replace("$ITEMCODE$", ITEMCODEARR[i]);
                    str_2 = str_2.Replace("$qrcode$", "qrcode" + i);
                    stringBuilder.Append(str_2);
                }
                if (strbarcode.Length > 0)
                    strbarcode = strbarcode.Substring(0, strbarcode.Length - 1);
                InvoicePrintBC bc = new InvoicePrintBC();
                response = bc.InsertInvoiceLabelPrintBC(request);
                var data = stringBuilder.ToString();
                if (response.result == true)
                {
                    strdata = response.result + "|" + data + "|" + strbarcode;
                    return Json(strdata);
                }
                else
                {
                    strdata = Convert.ToString(response.result);
                    return Json(strdata);
                }

            }
            catch (Exception ex)
            {
                string responsetime = DateTime.Now.ToString("yyyy MM dd hh:mm:ss.fff tt");
                string responselog = createlog("InsertPOLabelPrint: " + "Method Name InsertPOLabelPrint" + " -- " + ex.StackTrace + "-- " + ex.Source + " -- " + ex.Message);
                strdata = "False" + "|" + "Error occurred. Error details: " + " -- " + ex.StackTrace + "-- " + ex.Source + " -- " + ex.Message;
                return Json(strdata);
            }
        }

        static List<InvoicePrintDetailEntity> InvoiceLabelPrintdet = new List<InvoicePrintDetailEntity>();
        static List<InvoicePrintDetailEntity> InvoicePopupLabelPrintdet = new List<InvoicePrintDetailEntity>();

        public class InvoicePrintRequestDetails
        {
            public string INVOICENO { get; set; }
            public string ITEMCODE { get; set; }
            public string ITEMNAME { get; set; }
            public string UOM { get; set; }
            public string QUANTITY { get; set; }

        }
        public class InvoicePopupPrintRequestDetails
        {
            public string INVOICENO { get; set; }
            public string ITEMCODE { get; set; }
            public string ITEMNAME { get; set; }
            public string UOM { get; set; }
            public string QUANTITY { get; set; }
            public string ACTUAL { get; set; }
            public string REMOVE { get; set; }
        }
        public ActionResult AddInvoiceInventoryDetails()
        {
            List<InvoicePrintRequestDetails> listInventoryInsertdet = new List<InvoicePrintRequestDetails>();

            int duplicatecount = InvoiceLabelPrintdet.Where(inventorylist => inventorylist.INVOICENO == Request.Form["INVOICENO"].ToString() && inventorylist.ITEMCODE == Request.Form["ITEMCODE"].ToString()).Count();
            long eq = Convert.ToInt64(Request.Form["Quantity"]);
            string result = "";
            if (duplicatecount == 0)
            {
                for (int i = 0; i < eq; i++)
                {
                    InvoicePrintDetailEntity InvoiceLblPrintdet = new InvoicePrintDetailEntity();

                    InvoiceLblPrintdet.INVOICENO = Request.Form["INVOICENO"];
                    InvoiceLblPrintdet.ITEMCODE = Request.Form["ITEMCODE"];
                    InvoiceLblPrintdet.ITEMNAME = Request.Form["ITEMNAME"];
                    InvoiceLblPrintdet.UOM = Request.Form["UOM"];

                    InvoiceLblPrintdet.QUANTITY = Convert.ToString(1);

                    InvoiceLabelPrintdet.Add(InvoiceLblPrintdet);

                    listInventoryInsertdet = (from inv in InvoiceLabelPrintdet.AsEnumerable()
                                              select new InvoicePrintRequestDetails
                                              {
                                                  INVOICENO = inv.INVOICENO,
                                                  ITEMCODE = inv.ITEMCODE,
                                                  ITEMNAME = inv.ITEMNAME,
                                                  UOM = inv.UOM,
                                                  QUANTITY = inv.QUANTITY
                                              }).ToList();

                }
                result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

            }
            else
            {
                result = "false" + "|" + JsonConvert.SerializeObject("Invoice No " + Request.Form["INVOICENO"].ToString() + " Already Exist.");
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        static List<InvoicePopupPrintRequestDetails> listInventoryInsertdet = new List<InvoicePopupPrintRequestDetails>();
        public ActionResult AddInvoicePopupInventoryDetails()
        {

            string result = "";


            int duplicatecount = InvoicePopupLabelPrintdet.Where(inventorylist => inventorylist.INVOICENO == Request.Form["INVOICENO"].ToString()).Count();
            decimal sumactual = (from emp in InvoicePopupLabelPrintdet
                                 select emp).Sum(e => Convert.ToDecimal(e.ACTUAL));


            if (Request.Form["isauto"].ToString() == "true")
            {
                long eq = Convert.ToInt64(Request.Form["LotQuantity"]) / Convert.ToInt64(Request.Form["actual"]);
                long rem = Convert.ToInt64(Request.Form["LotQuantity"]) % Convert.ToInt64(Request.Form["actual"]);
                if (rem > 0)
                {
                    if (rem > 0)
                    {

                        InvoicePrintDetailEntity InvoiceLblPrintdet = new InvoicePrintDetailEntity();

                        InvoiceLblPrintdet.INVOICENO = Request.Form["InvoiceNo"];
                        InvoiceLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
                        InvoiceLblPrintdet.ITEMNAME = Request.Form["ItemName"];
                        InvoiceLblPrintdet.UOM = Request.Form["Uom"];

                        // RMLblPrintdet.QUANTITY = Convert.ToString(eq + 1);
                        InvoiceLblPrintdet.QUANTITY = Request.Form["LotQuantity"];

                        InvoiceLblPrintdet.ACTUAL = Convert.ToString(rem);
                        InvoicePopupLabelPrintdet.Add(InvoiceLblPrintdet);

                        //Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

                        listInventoryInsertdet = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                                  select new InvoicePopupPrintRequestDetails
                                                  {

                                                      INVOICENO = inv.INVOICENO,
                                                      ITEMCODE = inv.ITEMCODE,
                                                      ITEMNAME = inv.ITEMNAME,
                                                      UOM = inv.UOM,
                                                      QUANTITY = inv.QUANTITY,
                                                      ACTUAL = inv.ACTUAL
                                                  }).ToList();

                    }

                    for (int i = 0; i < eq; i++)
                    {
                        InvoicePrintDetailEntity InvoiceLblPrintdet = new InvoicePrintDetailEntity();

                        InvoiceLblPrintdet.INVOICENO = Request.Form["InvoiceNo"];
                        InvoiceLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
                        InvoiceLblPrintdet.ITEMNAME = Request.Form["ItemName"];
                        InvoiceLblPrintdet.UOM = Request.Form["Uom"];
                        InvoiceLblPrintdet.QUANTITY = Request.Form["LotQuantity"];

                        InvoiceLblPrintdet.ACTUAL = Request.Form["actual"];
                        InvoicePopupLabelPrintdet.Add(InvoiceLblPrintdet);

                        //    Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

                        listInventoryInsertdet = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                                  select new InvoicePopupPrintRequestDetails
                                                  {

                                                      INVOICENO = inv.INVOICENO,
                                                      ITEMCODE = inv.ITEMCODE,
                                                      ITEMNAME = inv.ITEMNAME,
                                                      UOM = inv.UOM,
                                                      QUANTITY = inv.QUANTITY,
                                                      ACTUAL = inv.ACTUAL
                                                  }).ToList();


                    }

                    result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

                }
                else
                {


                    for (int i = 0; i < eq; i++)
                    {
                        InvoicePrintDetailEntity InvoiceLblPrintdet = new InvoicePrintDetailEntity();

                        InvoiceLblPrintdet.INVOICENO = Request.Form["InvoiceNo"];
                        InvoiceLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
                        InvoiceLblPrintdet.ITEMNAME = Request.Form["ItemName"];
                        InvoiceLblPrintdet.UOM = Request.Form["Uom"];

                        // RMLblPrintdet.QUANTITY = Convert.ToString(eq );
                        InvoiceLblPrintdet.QUANTITY = Request.Form["LotQuantity"];

                        InvoiceLblPrintdet.ACTUAL = Request.Form["actual"];
                        InvoicePopupLabelPrintdet.Add(InvoiceLblPrintdet);

                        // Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

                        listInventoryInsertdet = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                                  select new InvoicePopupPrintRequestDetails
                                                  {

                                                      INVOICENO = inv.INVOICENO,
                                                      ITEMCODE = inv.ITEMCODE,
                                                      ITEMNAME = inv.ITEMNAME,
                                                      UOM = inv.UOM,
                                                      QUANTITY = inv.QUANTITY,
                                                      ACTUAL = inv.ACTUAL
                                                  }).ToList();

                    }

                    result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);

                }
            }
            else
            {


                if ((Convert.ToDecimal(Request.Form["LotQuantity"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"]))) >= 0)
                {
                    InvoicePrintDetailEntity InvoiceLblPrintdet = new InvoicePrintDetailEntity();

                    InvoiceLblPrintdet.INVOICENO = Request.Form["InvoiceNo"];
                    InvoiceLblPrintdet.ITEMCODE = Request.Form["ItemCode"];
                    InvoiceLblPrintdet.ITEMNAME = Request.Form["ItemName"];
                    InvoiceLblPrintdet.UOM = Request.Form["Uom"];

                    // RMLblPrintdet.QUANTITY = Convert.ToString(eq );
                    InvoiceLblPrintdet.QUANTITY = Request.Form["LotQuantity"];

                    InvoiceLblPrintdet.ACTUAL = Request.Form["actual"];

                    if (listInventoryInsertdet.Count < Convert.ToInt32(Request.Form["LotQuantity"]))
                    {
                        InvoicePopupLabelPrintdet.Add(InvoiceLblPrintdet);



                        //Decimal actual = (Convert.ToDecimal(Request.Form["NetWeight"]) - (sumactual + Convert.ToDecimal(Request.Form["actual"])));

                        listInventoryInsertdet = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                                  select new InvoicePopupPrintRequestDetails
                                                  {

                                                      INVOICENO = inv.INVOICENO,
                                                      ITEMCODE = inv.ITEMCODE,
                                                      ITEMNAME = inv.ITEMNAME,
                                                      UOM = inv.UOM,
                                                      QUANTITY = inv.QUANTITY,
                                                      ACTUAL = inv.ACTUAL
                                                  }).ToList();
                        if (((Convert.ToDecimal(Request.Form["LotQuantity"]) - (sumactual)) >= 0))
                        {
                            result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);
                        }
                    }
                    else
                    {

                        result = "false" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);
                    }



                }
                else
                {
                    InvoicePopupLabelPrintdet.Clear();
                    listInventoryInsertdet = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                              select new InvoicePopupPrintRequestDetails
                                              {

                                                  INVOICENO = inv.INVOICENO,
                                                  ITEMCODE = inv.ITEMCODE,
                                                  ITEMNAME = inv.ITEMNAME,
                                                  UOM = inv.UOM,
                                                  QUANTITY = inv.QUANTITY,
                                                  ACTUAL = inv.ACTUAL
                                              }).ToList();
                    result = "false" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet);
                }

            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ClearInvoicePopLabelprint()
        {
            InvoicePopupLabelPrintdet = new List<InvoicePrintDetailEntity>();
            InvoicePopupLabelPrintdet.Clear();


            listInventoryInsertdet = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                      select new InvoicePopupPrintRequestDetails
                                      {

                                          INVOICENO = inv.INVOICENO,
                                          ITEMCODE = inv.ITEMCODE,
                                          ITEMNAME = inv.ITEMNAME,
                                          UOM = inv.UOM,
                                          QUANTITY = inv.QUANTITY,
                                          ACTUAL = inv.ACTUAL
                                      }).ToList();


            return Json(JsonConvert.SerializeObject(listInventoryInsertdet), JsonRequestBehavior.AllowGet);
        }
        public ActionResult ClearInvoiceLabelprint()
        {

            InvoiceLabelPrintdet = new List<InvoicePrintDetailEntity>();
            return Json("", JsonRequestBehavior.AllowGet);
        }
        static List<InvoicePopupPrintRequestDetails> listInventoryInsertdet1 = new List<InvoicePopupPrintRequestDetails>();


        public ActionResult OkInventoryDetails()
        {

            List<InvoicePrintRequestDetails> listInventoryInsertdet = new List<InvoicePrintRequestDetails>();
            string result = "";
            decimal sumactual = (from emp in InvoicePopupLabelPrintdet
                                 select emp).Sum(e => Convert.ToDecimal(e.ACTUAL));
            decimal sumlot = Convert.ToDecimal(Request.Form["LotQuantity"]);
            int rmcount = InvoicePopupLabelPrintdet.Count;
            if (Request.Form["isauto"].ToString() == "true")
            {
                if (InvoicePopupLabelPrintdet.Count > 0)
                {
                    foreach (InvoicePrintDetailEntity rml in InvoicePopupLabelPrintdet)
                    {
                        InvoicePrintDetailEntity InvoiceLblPrintdet = new InvoicePrintDetailEntity();
                        InvoiceLblPrintdet.INVOICENO = rml.INVOICENO;
                        InvoiceLblPrintdet.ITEMCODE = rml.ITEMCODE;
                        InvoiceLblPrintdet.ITEMNAME = rml.ITEMNAME;
                        InvoiceLblPrintdet.UOM = rml.UOM;

                        InvoiceLblPrintdet.QUANTITY = rml.ACTUAL;

                        InvoiceLblPrintdet.ACTUAL = rml.ACTUAL;
                        InvoiceLabelPrintdet.Add(InvoiceLblPrintdet);
                    }
                }



                InvoicePopupLabelPrintdet.Clear();
                listInventoryInsertdet1 = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                           select new InvoicePopupPrintRequestDetails
                                           {

                                               INVOICENO = inv.INVOICENO,
                                               ITEMCODE = inv.ITEMCODE,
                                               ITEMNAME = inv.ITEMNAME,
                                               UOM = inv.UOM,

                                               QUANTITY = inv.ACTUAL,

                                               ACTUAL = inv.ACTUAL
                                           }).ToList();

                listInventoryInsertdet = (from inv in InvoiceLabelPrintdet.AsEnumerable()
                                          select new InvoicePrintRequestDetails
                                          {
                                              INVOICENO = inv.INVOICENO,
                                              ITEMCODE = inv.ITEMCODE,
                                              ITEMNAME = inv.ITEMNAME,
                                              UOM = inv.UOM,

                                              QUANTITY = inv.QUANTITY
                                          }).ToList();

                result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet) + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);

            }
            else
            {
                if (sumlot == sumactual && (rmcount == Convert.ToInt32(Request.Form["LotQuantity"])))
                {

                    if (InvoicePopupLabelPrintdet.Count > 0)
                    {
                        foreach (InvoicePrintDetailEntity rml in InvoicePopupLabelPrintdet)
                        {
                            InvoicePrintDetailEntity InvoiceLblPrintdet = new InvoicePrintDetailEntity();
                            InvoiceLblPrintdet.INVOICENO = rml.INVOICENO;
                            InvoiceLblPrintdet.ITEMCODE = rml.ITEMCODE;
                            InvoiceLblPrintdet.ITEMNAME = rml.ITEMNAME;
                            InvoiceLblPrintdet.UOM = rml.UOM;
                            InvoiceLblPrintdet.QUANTITY = rml.ACTUAL;

                            InvoiceLblPrintdet.ACTUAL = rml.ACTUAL;
                            InvoiceLabelPrintdet.Add(InvoiceLblPrintdet);
                        }
                    }



                    InvoicePopupLabelPrintdet.Clear();
                    listInventoryInsertdet1 = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                               select new InvoicePopupPrintRequestDetails
                                               {
                                                   INVOICENO = inv.INVOICENO,
                                                   ITEMCODE = inv.ITEMCODE,
                                                   ITEMNAME = inv.ITEMNAME,
                                                   UOM = inv.UOM,

                                                   QUANTITY = inv.ACTUAL,

                                                   ACTUAL = inv.ACTUAL
                                               }).ToList();


                    listInventoryInsertdet = (from inv in InvoiceLabelPrintdet.AsEnumerable()
                                              select new InvoicePrintRequestDetails
                                              {
                                                  INVOICENO = inv.INVOICENO,
                                                  ITEMCODE = inv.ITEMCODE,
                                                  ITEMNAME = inv.ITEMNAME,
                                                  UOM = inv.UOM,

                                                  QUANTITY = inv.QUANTITY
                                              }).ToList();
                    result = "true" + "|" + JsonConvert.SerializeObject(listInventoryInsertdet) + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);


                }
                else
                {
                    result = "false" + "|" + JsonConvert.SerializeObject("Please Split Lot Quantity to Proceed") + "|" + JsonConvert.SerializeObject(listInventoryInsertdet1);
                }
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult DeleteInspectionRow(string QUANTITY, string ACTUAL)
        {
            List<InvoicePopupPrintRequestDetails> listInventoryInsertdet4 = new List<InvoicePopupPrintRequestDetails>();
            InvoicePopupLabelPrintdet.Remove(InvoicePopupLabelPrintdet.FirstOrDefault(r => r.QUANTITY == QUANTITY && r.ACTUAL == ACTUAL));
            // listInventoryInsertdet4.Where(w => w.SERIALNO == SERIALNO && w.ACTUAL == ACTUAL).ToList();

            listInventoryInsertdet4 = (from inv in InvoicePopupLabelPrintdet.AsEnumerable()
                                       select new InvoicePopupPrintRequestDetails
                                       {
                                           INVOICENO = inv.INVOICENO,
                                           ITEMCODE = inv.ITEMCODE,
                                           ITEMNAME = inv.ITEMNAME,
                                           UOM = inv.UOM,
                                           QUANTITY = inv.QUANTITY,

                                           ACTUAL = inv.ACTUAL
                                       }).ToList();
            return Json(JsonConvert.SerializeObject(listInventoryInsertdet4), JsonRequestBehavior.AllowGet);
        }

        public ActionResult InsertInvoicePrintDetails(string invoiceno, string itemcode, string itemname, string uom, string quantity)
        {
            List<InvoicePrintRequestDetails> ListMaterialDtls = new List<InvoicePrintRequestDetails>();
            RequestInvoicePrint request = new RequestInvoicePrint();
            ResponseInvoicePrint response = new ResponseInvoicePrint();

            request.requestinvoiceprintchilddetails = new List<InvoicePrintDetailEntity>();

            string[] invoicenoarr = invoiceno.Split('^');
            string[] itemcodearr = itemcode.Split('^');
            string[] itemnamearr = itemname.Split('^');
            string[] uomarr = uom.Split('^');

            string[] quantityarr = quantity.Split('^');

            string strbarcode = "";
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 0; i < invoicenoarr.Length; i++)
            {
                if (invoicenoarr[i] != "")
                {
                    InvoicePrintDetailEntity det = new InvoicePrintDetailEntity();
                    det.INVOICENO = invoicenoarr[i];
                    det.ITEMCODE = itemcodearr[i];
                    det.ITEMNAME = itemnamearr[i];
                    det.UOM = uomarr[i];

                    det.QUANTITY = quantityarr[i];

                    string barcode = DateTime.Now.Ticks.ToString() + i;
                    det.BARCODE = barcode + ";" + itemcodearr[i] + ";" + quantityarr[i];

                    request.requestinvoiceprintchilddetails.Add(det);
                    strbarcode += barcode + ";" + itemcodearr[i] + ";" + quantityarr[i] + "^";

                    String test = @"<div style='page-break-after:always'><table style='width: 375px; margin-top:10px; margin-left:25px;'><tr><td text-align='left' style='width: 375px'><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial'>Item: $ITEMCODE$</p><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial; font-stretch: condensed'>Name: $ITEMNAME$</p><p style='margin-top:10px; margin-bottom:0px; font-size:20px; font-weight:700; font-family: Arial'>GRN No.: $GRNNO$</p><p style='margin-top:0px; margin-bottom:0px; font-weight:700; font-family: Arial; font-stretch: condensed'><span style='font-size:25px;'>LOT NO.: </span><span style='font-size:40px;'>$LOTNO$</span></p></td> </tr></table><table style='width: 375px; margin-left:25px;'><tr><td text-align='left' style='width: 200px''><p style='margin-top:0px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial'>Date: $GRNDATE$</p><p style='margin-top:10px; margin-bottom:10px; font-size:20px; font-weight:700; font-family: Arial'>Label Seq.: $LABELSEQ$</p></td><td align='center' style='width: 175px; vertical-align:middle;'><div style='margin: 10px;' id='$qrcode$'></div></td></tr></table></div>";

                    byte[] byteArray = Encoding.ASCII.GetBytes(test);
                    MemoryStream stream = new MemoryStream(byteArray);
                    //StreamReader streamReader = new StreamReader(stream);
                    StreamReader streamReader = new StreamReader(POBARCODELABEL);
                    string str_ = streamReader.ReadToEnd();
                    string str_2 = str_;
                    str_2 = str_2.Replace("$ITEMCODE$", itemcodearr[i]);
                    str_2 = str_2.Replace("$qrcode$", "qrcode" + i);
                    str_2 = str_2.Replace("$ITEMNAME$", itemnamearr[i]);

                    stringBuilder.Append(str_2);
                }
            }

            if (strbarcode.Length > 0)
                strbarcode = strbarcode.Substring(0, strbarcode.Length - 1);
            InvoicePrintBC bc = new InvoicePrintBC();
            response = bc.InsertTempTableInvoicePrintBC(request);
            var data = stringBuilder.ToString();
            if (response.result == true)
            {
                string strdata = response.result + "|" + data + "|" + strbarcode;
                TempData["invoicedetails"] = null;
                InvoiceLabelPrintdet = new List<InvoicePrintDetailEntity>();
                return Json(strdata);
            }
            else
            {
                string strdata = Convert.ToString(response.result);
                return Json(strdata);
            }
        }

        #endregion


        #region PastingProcess ............................................................................
        public ActionResult PastingProcess()
        {
            return View();
        }

        static List<PastingProcessDetailsEntity> listpastingprocessdet = new List<PastingProcessDetailsEntity>();

        public class PastingProcessDetails
        {
            public string ITEMCODE { get; set; }
            public string ITEMNAME { get; set; }
            public string BARCODE { get; set; }


        }

        public ActionResult FetchscanBarcode(string BARCODE)
        {
            RequestPastingProcess request = new RequestPastingProcess();
            ResponsePastingProcess response = new ResponsePastingProcess();
            request.ReqPastingProcess = new PastingProcessEntity();
            request.ReqPastingProcess.BARCODE = BARCODE;
            PastingProcessBC bc = new PastingProcessBC();
            response = bc.ScanBarcodeBC(request);

            List<PastingProcessDetails> listpastingprocessInsertdet = new List<PastingProcessDetails>();

            string data = "";

            PastingProcessDetailsEntity Itemdts = new PastingProcessDetailsEntity();

            Itemdts.ITEMCODE = response.JS_barcodedetails.Rows[0]["ITEMCODE"].ToString();
            Itemdts.ITEMNAME = response.JS_barcodedetails.Rows[0]["ITEMNAME"].ToString();
            Itemdts.BARCODE = response.JS_barcodedetails.Rows[0]["BARCODE"].ToString(); ;
            listpastingprocessdet.Add(Itemdts);

            listpastingprocessInsertdet = (from inv in listpastingprocessdet.AsEnumerable()
                                           select new PastingProcessDetails
                                           {

                                               ITEMCODE = inv.ITEMCODE,
                                               ITEMNAME = inv.ITEMNAME,
                                               BARCODE = inv.BARCODE

                                           }).ToList();
            data = "true" + "|" + JsonConvert.SerializeObject(listpastingprocessInsertdet);

            return Json(data, JsonRequestBehavior.AllowGet);
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        [HttpPost]
        public ActionResult InsertPastingDetails()
        {

            RequestPastingProcess request = new RequestPastingProcess();
            ResponsePastingProcess response = new ResponsePastingProcess();
            request.ReqPastingProcess = new PastingProcessEntity();
            request.requestPastingProcessdetails = listpastingprocessdet;
            //   request.ReqPastingProcess.BARCODE = Request.Form["BARCODE"];

            StringBuilder stringBuilder = new StringBuilder();
            StreamReader streamReader = new StreamReader(POBARCODELABEL);
            string str_ = streamReader.ReadToEnd();
            string str_2 = str_;
            str_2 = str_2.Replace("$qrcode$", "qrcode");
            stringBuilder.Append(str_2);
            PastingProcessBC bc = new PastingProcessBC();
            response = bc.PastingInsertBC(request);
            var data = stringBuilder.ToString();
            ManageError Err = new ManageError();

            string resultjson = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Labelprintingbarcode);

            resultjson = response.result + "|" + data + "|" + resultjson;
            if (response.result == true)
            {
                TempData["PASTINGINSERT"] = null;
                listpastingprocessdet = new List<PastingProcessDetailsEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }




        #endregion

        #region InvoiceUpload ............................................................................
        public ActionResult InvoiceUpload()
        {
            return View();
        }
        static List<InvoiceUploaddetailsEntity> listinvoiceuploaddet = new List<InvoiceUploaddetailsEntity>();
        static List<InvoiceUploaddetailsEntity> listinvoiceuploadheader = new List<InvoiceUploaddetailsEntity>();
        static List<InvoiceUploaddetailsEntity> listinvoiceuploaddetails = new List<InvoiceUploaddetailsEntity>();
        public ActionResult InvoiceUploads()
        {
            listinvoiceuploaddet = new List<InvoiceUploaddetailsEntity>();
            string results = "";
            if (Request.Files.Count > 0)
            {
                try
                {
                    HttpFileCollectionBase files = Request.Files;
                    var postedFile = System.Web.HttpContext.Current.Request.Files["CsvDoc"];
                    string path = Path.GetFileName(postedFile.FileName);
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if (file.FileName == postedFile.FileName)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                Stream stream = file.InputStream;
                                IExcelDataReader reader = null;
                                if (file.FileName.EndsWith(".xls"))
                                {
                                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                                }
                                else if (file.FileName.EndsWith(".xlsx"))
                                {
                                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                                }
                                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                                {
                                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                                    {
                                        UseHeaderRow = true
                                    }
                                });
                                DataTable dataTable = result.Tables[0];
                                DataTable dts = new DataTable();
                                dts.Columns.Add("Invoice No");
                                dts.Columns.Add("Invoice Date");
                                dts.Columns.Add("Supplier Name");
                                dts.Columns.Add("Reference No");
                                dts.Columns.Add("ItemCode");
                                dts.Columns.Add("Quantity");
                                string colnames = string.Empty;
                                string ColumnData = string.Empty;
                                for (var j = 0; j < dataTable.Rows.Count; j++)
                                {
                                    DataRow dr = dts.NewRow();
                                    dr["Invoice No"] = dataTable.Rows[j][1].ToString();
                                    dr["Invoice Date"] = dataTable.Rows[j][2].ToString();
                                    dr["Supplier Name"] = dataTable.Rows[j][3].ToString();
                                    dr["Reference No"] = dataTable.Rows[j][4].ToString();
                                    dr["ItemCode"] = dataTable.Rows[j][5].ToString();
                                    dr["Quantity"] = dataTable.Rows[j][6].ToString();
                                    if (!dataTable.Rows[j][0].ToString().Equals(""))
                                    {
                                        InvoiceUploaddetailsEntity Itemdts = new InvoiceUploaddetailsEntity();
                                        Itemdts.INVOICENO = dataTable.Rows[j][1].ToString();
                                        Itemdts.INVOICEDATE = dataTable.Rows[j][2].ToString();
                                        Itemdts.SUPPLIERNAME = dataTable.Rows[j][3].ToString();
                                        Itemdts.REFERENCENO = dataTable.Rows[j][4].ToString();
                                        Itemdts.ITEMCODE = dataTable.Rows[j][5].ToString();
                                        Itemdts.QUANTITY = dataTable.Rows[j][6].ToString();
                                        listinvoiceuploaddet.Add(Itemdts);
                                        dts.Rows.Add(dr);
                                    }
                                    else
                                    {

                                    }


                                    var query = (from t in listinvoiceuploaddet
                                                 group t by new { t.INVOICENO, t.INVOICEDATE, t.SUPPLIERNAME, t.REFERENCENO }
                                             into grp
                                                 select new
                                                 {
                                                     grp.Key.INVOICENO,
                                                     grp.Key.INVOICEDATE,
                                                     grp.Key.SUPPLIERNAME,
                                                     grp.Key.REFERENCENO
                                                 }).ToList();


                                    listinvoiceuploadheader = (from inv in query.AsEnumerable()
                                                               select new InvoiceUploaddetailsEntity
                                                               {
                                                                   INVOICENO = inv.INVOICENO,
                                                                   INVOICEDATE = inv.INVOICEDATE,
                                                                   SUPPLIERNAME = inv.SUPPLIERNAME,
                                                                   REFERENCENO = inv.REFERENCENO,
                                                               }).ToList();

                                    var query1 = (from t in listinvoiceuploaddet
                                                  group t by new { t.INVOICENO, t.ITEMCODE, t.QUANTITY }
                                          into grp
                                                  select new
                                                  {
                                                      grp.Key.INVOICENO,
                                                      grp.Key.ITEMCODE,
                                                      grp.Key.QUANTITY,
                                                  }).ToList();


                                    listinvoiceuploaddetails = (from inv in query1.AsEnumerable()
                                                                select new InvoiceUploaddetailsEntity
                                                                {

                                                                    INVOICENO = inv.INVOICENO,
                                                                    ITEMCODE = inv.ITEMCODE,
                                                                    QUANTITY = inv.QUANTITY,
                                                                }).ToList();



                                }

                                reader.Close();

                                results = "True" + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(dts);


                            }
                        }
                        else
                        {
                            results = "False" + "|" + "Uploaded InValid Excel File. ";
                        }

                    }


                }

                catch (Exception ex)
                {

                    results = "False" + "|" + "Error occurred. Error details: ";

                }
            }

            JsonResult json = Json(results, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }
        public ActionResult InsertInvoiceUpload()
        {
            string results = "";
            string data = "";
            IExcelDataReader reader = null;
            DataTable dataTable = null;
            if (Request.Files.Count > 0)
            {
                try
                {
                    if (listinvoiceuploadheader.Count > 0)
                    {
                        RequestInvoiceUpload request = new RequestInvoiceUpload();
                        ResponseInvoiceUpload response = new ResponseInvoiceUpload();
                        request.requestinvoiceuploaddetails = listinvoiceuploadheader;
                        request.requestinvoiceuploadinvdts = listinvoiceuploaddetails;
                        request.ReqInvoiceUpload = new InvoiceUploadEntity();
                        InvoiceUploadBC bc = new InvoiceUploadBC();
                        // string value = "Update";
                        response = bc.InvoiceUploadInsertBC(request);
                        ManageError Err = new ManageError();
                        string resultjson = Err.GenerateErrorMessages(response.error);
                        resultjson = response.result + "|" + resultjson;
                        if (response.result == true)
                        {
                            listinvoiceuploaddet = new List<InvoiceUploaddetailsEntity>();
                        }
                        return Json(resultjson);
                    }
                    else
                    {
                        results = "False" + "|" + "Please View Uploaded Content before Save. ";
                        return Json(results);
                    }
                }
                catch (Exception ex)
                {
                    results = "False" + "|" + ex.Message.ToString();
                    return Json(results);
                }
            }
            else
            {
                results = "False" + "|" + "Please Choose File to Upload. ";
                return Json(results);
            }
            // return Json(results);
        }
        #endregion
        #region ProductionPlanUpload ............................................................................
        public ActionResult ProductionPlanUpload()
        {
            return View();
        }
        static List<ProductionPlanUploaddetailsEntity> listProductionplanUploadItemdet = new List<ProductionPlanUploaddetailsEntity>();
        public ActionResult ProductionPlanUploads()
        {
            string results = "";
            if (Request.Files.Count > 0)
            {
                try
                {
                    HttpFileCollectionBase files = Request.Files;
                    var postedFile = System.Web.HttpContext.Current.Request.Files["CsvDoc"];
                    string path = Path.GetFileName(postedFile.FileName);
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if (file.FileName == postedFile.FileName)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                Stream stream = file.InputStream;
                                IExcelDataReader reader = null;
                                if (file.FileName.EndsWith(".xls"))
                                {
                                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                                }
                                else if (file.FileName.EndsWith(".xlsx"))
                                {
                                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                                }
                                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                                {
                                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                                    {
                                        UseHeaderRow = true
                                    }
                                });
                                DataTable dataTable = result.Tables[0];
                                DataTable dts = new DataTable();
                                dts.Columns.Add("CUSTOMER");
                                dts.Columns.Add("BATCHNUMBER");
                                dts.Columns.Add("PONUMBER");
                                dts.Columns.Add("STARTDATE");
                                dts.Columns.Add("ENDDATE");
                                dts.Columns.Add("WAREHOUSE");
                                dts.Columns.Add("CARCASE");
                                dts.Columns.Add("PANELCOUNT");
                                string colnames = string.Empty;
                                string ColumnData = string.Empty;
                                for (var j = 0; j < dataTable.Rows.Count; j++)
                                {
                                    DataRow dr = dts.NewRow();
                                    dr["CUSTOMER"] = dataTable.Rows[j][1].ToString();
                                    dr["BATCHNUMBER"] = dataTable.Rows[j][2].ToString();
                                    dr["PONUMBER"] = dataTable.Rows[j][3].ToString();
                                    dr["STARTDATE"] = dataTable.Rows[j][4].ToString();
                                    dr["ENDDATE"] = dataTable.Rows[j][5].ToString();
                                    dr["WAREHOUSE"] = dataTable.Rows[j][6].ToString();
                                    dr["CARCASE"] = dataTable.Rows[j][7].ToString();
                                    dr["PANELCOUNT"] = dataTable.Rows[j][8].ToString();
                                    if (!dataTable.Rows[j][0].ToString().Equals(""))
                                    {
                                        ProductionPlanUploaddetailsEntity Itemdts = new ProductionPlanUploaddetailsEntity();
                                        Itemdts.CUSTOMER = dataTable.Rows[j][1].ToString();
                                        Itemdts.BATCHNUMBER = dataTable.Rows[j][2].ToString();
                                        Itemdts.PONUMBER = dataTable.Rows[j][3].ToString();
                                        Itemdts.STARTDATE = dataTable.Rows[j][4].ToString();
                                        Itemdts.ENDDATE = dataTable.Rows[j][5].ToString();
                                        Itemdts.WAREHOUSE = dataTable.Rows[j][6].ToString();
                                        Itemdts.CARCASE = dataTable.Rows[j][7].ToString();
                                        Itemdts.PANELCOUNT = dataTable.Rows[j][8].ToString();
                                        listProductionplanUploadItemdet.Add(Itemdts);
                                        dts.Rows.Add(dr);
                                    }
                                    else
                                    {


                                    }

                                }

                                reader.Close();

                                results = "True" + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(dts);


                            }
                        }
                        else
                        {
                            results = "False" + "|" + "Uploaded InValid Excel File. ";
                        }

                    }


                }

                catch (Exception ex)
                {

                    results = "False" + "|" + "Error occurred. Error details: ";

                }
            }

            JsonResult json = Json(results, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }


        // return Json(results);
        public ActionResult InsertProductionplanUpload()
        {
            string results = "";
            string data = "";
            IExcelDataReader reader = null;
            DataTable dataTable = null;
            if (Request.Files.Count > 0)
            {
                try
                {
                    if (listProductionplanUploadItemdet.Count > 0)
                    {
                        RequestProductionPlanUpload request = new RequestProductionPlanUpload();
                        ResponseProductionPlanUpload response = new ResponseProductionPlanUpload();
                        request.requestProductionPlanUploadetails = listProductionplanUploadItemdet;
                        request.ReqProductionPlanUpload = new ProductionPlanUploadEntity();
                        ProductionPlanUploadBC bc = new ProductionPlanUploadBC();
                        // string value = "Update";
                        response = bc.ProductionPlanUploadInsertBC(request);
                        ManageError Err = new ManageError();
                        string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
                        resultjson = response.result + "|" + resultjson;
                        if (response.result == true)
                        {
                            listProductionplanUploadItemdet = new List<ProductionPlanUploaddetailsEntity>();
                        }
                        return Json(resultjson);
                    }
                    else
                    {
                        results = "False" + "|" + "Please View Uploaded Content before Save. ";
                        return Json(results);
                    }
                }
                catch (Exception ex)
                {
                    results = "False" + "|" + ex.Message.ToString();
                    return Json(results);
                }
            }
            else
            {
                results = "False" + "|" + "Please Choose File to Upload. ";
                return Json(results);
            }
        }
    [HttpPost]
        #endregion


        #region MaterialRequestUpload ............................................................................
        #endregion
        //public ActionResult MaterialRequestUpload()
        //{
        //    TempData["MATERIALUPLOAD"] = null;
        //    return View();
        //}
        public ActionResult MaterialUpload()
        {
            TempData["MATERIALUPLOAD"] = null;
            return View();
        }

        public ActionResult GetMaterialrequestPageLoad()
        {
            listMaterialRequestUploaddet = new List<MaterialRequestUploaddetailsEntity>();

            RequestMaterialUpload request = new RequestMaterialUpload();
            ResponseMaterialUpload response = new ResponseMaterialUpload();
            MaterialRequestUploadBC bc = new MaterialRequestUploadBC();
            response = bc.PageloadMaterialRequestBC();

            string resulttable = Utility.DataTableToJSONWithJavaScriptSerializer(response.JS_Batchnodts);
            var data = resulttable;
            JsonResult json = Json(data, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;

        }

        public class MaterialExcelUpload
        {
            public string SNO { get; set; }
            public string PARTCODE { get; set; }
            public string QUANTITY { get; set; }
        }

        static List<MaterialRequestUploaddetailsEntity> listMaterialRequestUploaddet = new List<MaterialRequestUploaddetailsEntity>();

        [HttpPost]
        public ActionResult MaterialEarningUploads()
        {
            string results = "";
            listMaterialRequestUploaddet = new List<MaterialRequestUploaddetailsEntity>();
            if (Request.Files.Count > 0)
            {
                try
                {
                    HttpFileCollectionBase files = Request.Files;
                    var postedFile = System.Web.HttpContext.Current.Request.Files["CsvDoc"];
                    string path = Path.GetFileName(postedFile.FileName);

                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        if (file.FileName == postedFile.FileName)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                Stream stream = file.InputStream;
                                IExcelDataReader reader = null;
                                if (file.FileName.EndsWith(".xls"))
                                {
                                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                                }
                                else if (file.FileName.EndsWith(".xlsx"))
                                {
                                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                                }
                                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                                {
                                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                                    {
                                        UseHeaderRow = true
                                    }
                                });
                                DataTable dataTable = result.Tables[0];

                                DataTable dts = new DataTable();
                                dts.Columns.Add("SNO");
                                dts.Columns.Add("PARTCODE");
                                dts.Columns.Add("QUANTITY");

                                string colnames = string.Empty;
                                string ColumnData = string.Empty;

                                for (var j = 0; j < dataTable.Rows.Count; j++)
                                {
                                    DataRow dr = dts.NewRow();
                                    // var theUrl = dataTable.Rows[j][2].ToString();
                                    dr["SNO"] = dataTable.Rows[j][0].ToString();
                                    dr["PARTCODE"] = dataTable.Rows[j][1].ToString();
                                    dr["QUANTITY"] = dataTable.Rows[j][2].ToString();

                                    if (!dataTable.Rows[j][0].ToString().Equals(""))
                                    {
                                        MaterialRequestUploaddetailsEntity MaterialItemdts = new MaterialRequestUploaddetailsEntity();

                                        MaterialItemdts.SNO = dataTable.Rows[j][0].ToString();
                                        MaterialItemdts.PARTCODE = dataTable.Rows[j][1].ToString();
                                        MaterialItemdts.QUANTITY = dataTable.Rows[j][2].ToString();

                                        listMaterialRequestUploaddet.Add(MaterialItemdts);
                                        dts.Rows.Add(dr);
                                    }
                                    else
                                    {

                                    }

                                }

                                reader.Close();
                                results = "True" + "|" + Utility.DataTableToJSONWithJavaScriptSerializer(dts);

                            }
                        }
                        else
                        {
                            results = "False" + "|" + "Uploaded InValid Excel File. ";
                        }

                    }

                }

                catch (Exception ex)
                {

                    results = "False" + "|" + "Error occurred. Error details: ";

                }
            }

            JsonResult json = Json(results, JsonRequestBehavior.AllowGet);
            json.MaxJsonLength = int.MaxValue;
            return json;
        }

        [HttpPost]
        public ActionResult InsertMaterialUploadDetails()
        {

            RequestMaterialUpload request = new RequestMaterialUpload();
            ResponseMaterialUpload response = new ResponseMaterialUpload();
            request.ReqMaterialUpload = new MaterialRequestUploadEntity();
            request.requestmaterialuploaddetails = listMaterialRequestUploaddet;
            request.ReqMaterialUpload.BATCHNO = Request.Form["BATCHNO"];
            request.ReqMaterialUpload.USERCODE = Session["LoginEmployeeCode"].ToString();
            MaterialRequestUploadBC bc = new MaterialRequestUploadBC();

            response = bc.MaterialUploadInsertBC(request);



            ManageError Err = new ManageError();

            string resultjson = Err.GenerateErrorMessages(response.ErrorContainer);
            resultjson = response.result + "|" + resultjson;
            if (response.result == true)
            {
                TempData["MATERIALUPLOAD"] = null;
                listMaterialRequestUploaddet = new List<MaterialRequestUploaddetailsEntity>();
                return Json(resultjson);
            }
            return Json(resultjson);
        }



       




        public string createlog(string content)
        {
            string filepath = ConfigurationSettings.AppSettings["logpath"].ToString();
            string Errordescription = ConfigurationSettings.AppSettings["logdescription"].ToString();

            try
            {
                string CurrentMachineName = Environment.MachineName;
                content += "  --  CurrentMachineName : " + CurrentMachineName;
                string UniqueID = DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss tt");

                System.IO.StreamWriter logWriter;
                DateTime currentTime = DateTime.Now;
                string logdate = "";
                logdate += currentTime.Year.ToString();

                if (int.Parse(currentTime.Month.ToString()) < 10)
                {
                    logdate += "0" + currentTime.Month.ToString();
                }
                else
                {
                    logdate += currentTime.Month.ToString();
                }

                if (int.Parse(currentTime.Day.ToString()) < 10)
                {
                    logdate += "0" + currentTime.Day.ToString();
                }
                else
                {
                    logdate += currentTime.Day.ToString();
                }

                //filepath after defined
                string logFile = filepath + "accesslogs_" + logdate + ".txt";

                if (System.IO.File.Exists(logFile))
                {
                    logWriter = System.IO.File.AppendText(logFile);
                }
                else
                {
                    logWriter = System.IO.File.CreateText(logFile);
                    logWriter.WriteLine("UniqueId,Page,IP,Date,Time,Param");
                }
                if (content != "")
                {
                    logWriter.WriteLine(UniqueID + "," + content);
                }
                logWriter.Close();
            }
            catch (Exception exp)
            {
                string Message = "ex.message :" + exp.Message + " -- Ex.Source :" + exp.Source + " -- e.starktrace : " + exp.StackTrace;
                String source = "Logger - accesslog";
                String log = "Application";
            }
            return Errordescription;
        }
    }

}



